require.config({"config": {
        "jsbuild":{"jquery/patches/jquery-ui-sortable.js":"/*!\n * jQuery UI Sortable\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    /**\n     * Patch for sortable widget.\n     * Can safely remove only when jQuery UI is upgraded to >= 1.13.1.\n     * Fixes:\n     * https://github.com/jquery/jquery-ui/pull/2008\n     * https://github.com/jquery/jquery-ui/pull/2009\n     */\n    var sortablePatch = {\n        /** @inheritdoc */\n        _mouseDrag: function (event) {\n            var i, item, itemElement, intersection,\n                o = this.options;\n\n            //Compute the helpers position\n            this.position = this._generatePosition(event);\n            this.positionAbs = this._convertPositionTo(\"absolute\");\n\n            //Set the helper position\n            if (!this.options.axis || this.options.axis !== \"y\") {\n                this.helper[0].style.left = this.position.left + \"px\";\n            }\n            if (!this.options.axis || this.options.axis !== \"x\") {\n                this.helper[0].style.top = this.position.top + \"px\";\n            }\n\n            //Do scrolling\n            if (o.scroll) {\n                if (this._scroll(event) !== false) {\n\n                    //Update item positions used in position checks\n                    this._refreshItemPositions(true);\n\n                    if ($.ui.ddmanager && !o.dropBehaviour) {\n                        $.ui.ddmanager.prepareOffsets(this, event);\n                    }\n                }\n            }\n\n            this.dragDirection = {\n                vertical: this._getDragVerticalDirection(),\n                horizontal: this._getDragHorizontalDirection()\n            };\n\n            //Rearrange\n            for (i = this.items.length - 1; i >= 0; i--) {\n\n                //Cache variables and intersection, continue if no intersection\n                item = this.items[i];\n                itemElement = item.item[0];\n                intersection = this._intersectsWithPointer(item);\n                if (!intersection) {\n                    continue;\n                }\n\n                // Only put the placeholder inside the current Container, skip all\n                // items from other containers. This works because when moving\n                // an item from one container to another the\n                // currentContainer is switched before the placeholder is moved.\n                //\n                // Without this, moving items in \"sub-sortables\" can cause\n                // the placeholder to jitter between the outer and inner container.\n                if (item.instance !== this.currentContainer) {\n                    continue;\n                }\n\n                // Cannot intersect with itself\n                // no useless actions that have been done before\n                // no action if the item moved is the parent of the item checked\n                if (itemElement !== this.currentItem[0] &&\n                    this.placeholder[intersection === 1 ?\n                        \"next\" : \"prev\"]()[0] !== itemElement &&\n                    !$.contains(this.placeholder[0], itemElement) &&\n                    (this.options.type === \"semi-dynamic\" ?\n                            !$.contains(this.element[0], itemElement) :\n                            true\n                    )\n                ) {\n\n                    this.direction = intersection === 1 ? \"down\" : \"up\";\n\n                    if (this.options.tolerance === \"pointer\" ||\n                        this._intersectsWithSides(item)) {\n                        this._rearrange(event, item);\n                    } else {\n                        break;\n                    }\n\n                    this._trigger(\"change\", event, this._uiHash());\n                    break;\n                }\n            }\n\n            //Post events to containers\n            this._contactContainers(event);\n\n            //Interconnect with droppables\n            if ($.ui.ddmanager) {\n                $.ui.ddmanager.drag(this, event);\n            }\n\n            //Call callbacks\n            this._trigger(\"sort\", event, this._uiHash());\n\n            this.lastPositionAbs = this.positionAbs;\n            return false;\n\n        },\n\n        /** @inheritdoc */\n        refreshPositions: function (fast) {\n\n            // Determine whether items are being displayed horizontally\n            this.floating = this.items.length ?\n                this.options.axis === \"x\" || this._isFloating(this.items[0].item) :\n                false;\n\n            // This has to be redone because due to the item being moved out/into the offsetParent,\n            // the offsetParent's position will change\n            if (this.offsetParent && this.helper) {\n                this.offset.parent = this._getParentOffset();\n            }\n\n            this._refreshItemPositions(fast);\n\n            var i, p;\n\n            if (this.options.custom && this.options.custom.refreshContainers) {\n                this.options.custom.refreshContainers.call(this);\n            } else {\n                for (i = this.containers.length - 1; i >= 0; i--) {\n                    p = this.containers[i].element.offset();\n                    this.containers[i].containerCache.left = p.left;\n                    this.containers[i].containerCache.top = p.top;\n                    this.containers[i].containerCache.width =\n                        this.containers[i].element.outerWidth();\n                    this.containers[i].containerCache.height =\n                        this.containers[i].element.outerHeight();\n                }\n            }\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        _contactContainers: function (event) {\n            var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom,\n                floating, axis,\n                innermostContainer = null,\n                innermostIndex = null;\n\n            // Get innermost container that intersects with item\n            for (i = this.containers.length - 1; i >= 0; i--) {\n\n                // Never consider a container that's located within the item itself\n                if ($.contains(this.currentItem[0], this.containers[i].element[0])) {\n                    continue;\n                }\n\n                if (this._intersectsWith(this.containers[i].containerCache)) {\n\n                    // If we've already found a container and it's more \"inner\" than this, then continue\n                    if (innermostContainer &&\n                        $.contains(\n                            this.containers[i].element[0],\n                            innermostContainer.element[0])) {\n                        continue;\n                    }\n\n                    innermostContainer = this.containers[i];\n                    innermostIndex = i;\n\n                } else {\n\n                    // container doesn't intersect. trigger \"out\" event if necessary\n                    if (this.containers[i].containerCache.over) {\n                        this.containers[i]._trigger(\"out\", event, this._uiHash(this));\n                        this.containers[i].containerCache.over = 0;\n                    }\n                }\n\n            }\n\n            // If no intersecting containers found, return\n            if (!innermostContainer) {\n                return;\n            }\n\n            // Move the item into the container if it's not there already\n            if (this.containers.length === 1) {\n                if (!this.containers[innermostIndex].containerCache.over) {\n                    this.containers[innermostIndex]._trigger(\"over\", event, this._uiHash(this));\n                    this.containers[innermostIndex].containerCache.over = 1;\n                }\n            } else {\n\n                // When entering a new container, we will find the item with the least distance and\n                // append our item near it\n                dist = 10000;\n                itemWithLeastDistance = null;\n                floating = innermostContainer.floating || this._isFloating(this.currentItem);\n                posProperty = floating ? \"left\" : \"top\";\n                sizeProperty = floating ? \"width\" : \"height\";\n                axis = floating ? \"pageX\" : \"pageY\";\n\n                for (j = this.items.length - 1; j >= 0; j--) {\n                    if (!$.contains(\n                        this.containers[innermostIndex].element[0], this.items[j].item[0])\n                    ) {\n                        continue;\n                    }\n                    if (this.items[j].item[0] === this.currentItem[0]) {\n                        continue;\n                    }\n\n                    cur = this.items[j].item.offset()[posProperty];\n                    nearBottom = false;\n                    if (event[axis] - cur > this.items[j][sizeProperty] / 2) {\n                        nearBottom = true;\n                    }\n\n                    if (Math.abs(event[axis] - cur) < dist) {\n                        dist = Math.abs(event[axis] - cur);\n                        itemWithLeastDistance = this.items[j];\n                        this.direction = nearBottom ? \"up\" : \"down\";\n                    }\n                }\n\n                //Check if dropOnEmpty is enabled\n                if (!itemWithLeastDistance && !this.options.dropOnEmpty) {\n                    return;\n                }\n\n                if (this.currentContainer === this.containers[innermostIndex]) {\n                    if (!this.currentContainer.containerCache.over) {\n                        this.containers[innermostIndex]._trigger(\"over\", event, this._uiHash());\n                        this.currentContainer.containerCache.over = 1;\n                    }\n                    return;\n                }\n\n                if (itemWithLeastDistance) {\n                    this._rearrange(event, itemWithLeastDistance, null, true);\n                } else {\n                    this._rearrange(event, null, this.containers[innermostIndex].element, true);\n                }\n                this._trigger(\"change\", event, this._uiHash());\n                this.containers[innermostIndex]._trigger(\"change\", event, this._uiHash(this));\n                this.currentContainer = this.containers[innermostIndex];\n\n                //Update the placeholder\n                this.options.placeholder.update(this.currentContainer, this.placeholder);\n\n                //Update scrollParent\n                this.scrollParent = this.placeholder.scrollParent();\n\n                //Update overflowOffset\n                if (this.scrollParent[0] !== this.document[0] &&\n                    this.scrollParent[0].tagName !== \"HTML\") {\n                    this.overflowOffset = this.scrollParent.offset();\n                }\n\n                this.containers[innermostIndex]._trigger(\"over\", event, this._uiHash(this));\n                this.containers[innermostIndex].containerCache.over = 1;\n            }\n\n        }\n    }\n\n    return function () {\n        var majorVersion = parseInt($.ui.version.split('.')[0]),\n            minorVersion = parseInt($.ui.version.split('.')[1]),\n            patchVersion = parseInt($.ui.version.split('.')[2])\n\n        if (majorVersion === 1 && minorVersion === 13 && patchVersion > 0 ||\n            majorVersion === 1 && minorVersion >= 14 ||\n            majorVersion >= 2\n        ) {\n            console.warn('jQuery ui sortable patch is no longer necessary, and should be removed');\n        }\n\n        $.widget('ui.sortable', $.ui.sortable, sortablePatch);\n    };\n\n});\n"}
}});

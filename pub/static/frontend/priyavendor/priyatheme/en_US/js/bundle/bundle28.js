require.config({"config": {
        "jsbuild":{"jquery/bootstrap/collapse.js":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): collapse.js and base-component.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\ndefine([\n    \"jquery\",\n    \"./util/index\",\n    \"./dom/data\",\n    \"./dom/event-handler\",\n    \"./dom/manipulator\",\n    \"./dom/selector-engine\"\n], function($, Util, Data, EventHandler, Manipulator, SelectorEngine) {\n    'use strict';\n\n    const defineJQueryPlugin = Util.defineJQueryPlugin;\n    const executeAfterTransition = Util.executeAfterTransition;\n    const getElement = Util.getElement;\n    const getSelectorFromElement = Util.getSelectorFromElement;\n    const getElementFromSelector = Util.getElementFromSelector;\n    const reflow = Util.reflow;\n    const typeCheckConfig = Util.typeCheckConfig;\n\n    /**\n     * ------------------------------------------------------------------------\n     * Constants\n     * ------------------------------------------------------------------------\n     */\n\n    const VERSION = '5.1.3'\n    const NAME = 'collapse'\n    const DATA_KEY = 'bs.collapse'\n    const EVENT_KEY = `.${DATA_KEY}`\n    const DATA_API_KEY = '.data-api'\n\n    const Default = {\n        toggle: true,\n        parent: null\n    }\n\n    const DefaultType = {\n        toggle: 'boolean',\n        parent: '(null|element)'\n    }\n\n    const EVENT_SHOW = `show${EVENT_KEY}`\n    const EVENT_SHOWN = `shown${EVENT_KEY}`\n    const EVENT_HIDE = `hide${EVENT_KEY}`\n    const EVENT_HIDDEN = `hidden${EVENT_KEY}`\n    const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\n    const CLASS_NAME_SHOW = 'show'\n    const CLASS_NAME_COLLAPSE = 'collapse'\n    const CLASS_NAME_COLLAPSING = 'collapsing'\n    const CLASS_NAME_COLLAPSED = 'collapsed'\n    const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`\n    const CLASS_NAME_HORIZONTAL = 'collapse-horizontal'\n\n    const WIDTH = 'width'\n    const HEIGHT = 'height'\n\n    const SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing'\n    const SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"collapse\"]'\n\n    /**\n     * ------------------------------------------------------------------------\n     * Class Definition\n     * ------------------------------------------------------------------------\n     */\n\n    var Collapse = function(element, config) {\n        element = getElement(element)\n\n        if (!element) {\n            return\n        }\n\n        this._element = element\n        Data.set(this._element, DATA_KEY, this)\n\n        this._isTransitioning = false\n        this._config = this._getConfig(config)\n        this._triggerArray = []\n\n        const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE)\n\n        for (let i = 0, len = toggleList.length; i < len; i++) {\n            const elem = toggleList[i]\n            const selector = getSelectorFromElement(elem)\n            const filterElement = SelectorEngine.find(selector)\n                .filter(foundElem => foundElem === this._element)\n\n            if (selector !== null && filterElement.length) {\n                this._selector = selector\n                this._triggerArray.push(elem)\n            }\n        }\n\n        this._initializeChildren()\n\n        if (!this._config.parent) {\n            this._addAriaAndCollapsedClass(this._triggerArray, this._isShown())\n        }\n\n        if (this._config.toggle) {\n            this.toggle()\n        }\n    }\n\n    // Getters\n\n    Collapse.VERSION = VERSION;\n\n    Collapse.Default = Default;\n\n    Collapse.NAME = NAME;\n\n    Collapse.DATA_KEY = 'bs.' + Collapse.NAME;\n\n    Collapse.EVENT_KEY = '.' + Collapse.DATA_KEY;\n\n    // Public\n\n    Collapse.prototype.dispose = function() {\n        Data.remove(this._element, this.constructor.DATA_KEY)\n        EventHandler.off(this._element, this.constructor.EVENT_KEY)\n\n        Object.getOwnPropertyNames(this).forEach(propertyName => {\n            this[propertyName] = null\n        })\n    }\n\n    Collapse.prototype._queueCallback = function(callback, element, isAnimated = true) {\n        executeAfterTransition(callback, element, isAnimated)\n    }\n\n    Collapse.prototype.toggle = function() {\n        if (this._isShown()) {\n            this.hide()\n        } else {\n            this.show()\n        }\n    }\n\n    Collapse.prototype.show = function() {\n        if (this._isTransitioning || this._isShown()) {\n            return\n        }\n\n        let actives = []\n        let activesData\n\n        if (this._config.parent) {\n            const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent)\n            actives = SelectorEngine.find(SELECTOR_ACTIVES, this._config.parent).filter(elem => !children.includes(elem)) // remove children if greater depth\n        }\n\n        const container = SelectorEngine.findOne(this._selector)\n        if (actives.length) {\n            const tempActiveData = actives.find(elem => container !== elem)\n            activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null\n\n            if (activesData && activesData._isTransitioning) {\n                return\n            }\n        }\n\n        const startEvent = EventHandler.trigger(this._element, EVENT_SHOW)\n        if (startEvent.defaultPrevented) {\n            return\n        }\n\n        actives.forEach(elemActive => {\n            if (container !== elemActive) {\n                Collapse.getOrCreateInstance(elemActive, {toggle: false}).hide()\n            }\n\n            if (!activesData) {\n                Data.set(elemActive, DATA_KEY, null)\n            }\n        })\n\n        const dimension = this._getDimension()\n\n        this._element.classList.remove(CLASS_NAME_COLLAPSE)\n        this._element.classList.add(CLASS_NAME_COLLAPSING)\n\n        this._element.style[dimension] = 0\n\n        this._addAriaAndCollapsedClass(this._triggerArray, true)\n        this._isTransitioning = true\n\n        const complete = () => {\n            this._isTransitioning = false\n\n            this._element.classList.remove(CLASS_NAME_COLLAPSING)\n            this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW)\n\n            this._element.style[dimension] = ''\n\n            EventHandler.trigger(this._element, EVENT_SHOWN)\n        }\n\n        const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1)\n        const scrollSize = `scroll${capitalizedDimension}`\n\n        this._queueCallback(complete, this._element, true)\n        this._element.style[dimension] = `${this._element[scrollSize]}px`\n    }\n\n    Collapse.prototype.hide = function() {\n        if (this._isTransitioning || !this._isShown()) {\n            return\n        }\n\n        const startEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n        if (startEvent.defaultPrevented) {\n            return\n        }\n\n        const dimension = this._getDimension()\n\n        this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`\n\n        reflow(this._element)\n\n        this._element.classList.add(CLASS_NAME_COLLAPSING)\n        this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW)\n\n        const triggerArrayLength = this._triggerArray.length\n        for (let i = 0; i < triggerArrayLength; i++) {\n            const trigger = this._triggerArray[i]\n            const elem = getElementFromSelector(trigger)\n\n            if (elem && !this._isShown(elem)) {\n                this._addAriaAndCollapsedClass([trigger], false)\n            }\n        }\n\n        this._isTransitioning = true\n\n        const complete = () => {\n            this._isTransitioning = false\n            this._element.classList.remove(CLASS_NAME_COLLAPSING)\n            this._element.classList.add(CLASS_NAME_COLLAPSE)\n            EventHandler.trigger(this._element, EVENT_HIDDEN)\n        }\n\n        this._element.style[dimension] = ''\n\n        this._queueCallback(complete, this._element, true)\n    }\n\n    Collapse.prototype._isShown = function(element = this._element) {\n        return element.classList.contains(CLASS_NAME_SHOW)\n    }\n\n    // Private\n\n    Collapse.prototype._getConfig = function(config) {\n        config = {\n            ...Default,\n            ...Manipulator.getDataAttributes(this._element),\n            ...config\n        }\n        config.toggle = Boolean(config.toggle) // Coerce string values\n        config.parent = getElement(config.parent)\n        typeCheckConfig(NAME, config, DefaultType)\n        return config\n    }\n\n    Collapse.prototype._getDimension = function() {\n        return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT\n    }\n\n    Collapse.prototype._initializeChildren = function() {\n        if (!this._config.parent) {\n            return\n        }\n\n        const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent)\n        SelectorEngine.find(SELECTOR_DATA_TOGGLE, this._config.parent).filter(elem => !children.includes(elem))\n            .forEach(element => {\n                const selected = getElementFromSelector(element)\n\n                if (selected) {\n                    this._addAriaAndCollapsedClass([element], this._isShown(selected))\n                }\n            })\n    }\n\n    Collapse.prototype._addAriaAndCollapsedClass = function(triggerArray, isOpen) {\n        if (!triggerArray.length) {\n            return\n        }\n\n        triggerArray.forEach(elem => {\n            if (isOpen) {\n                elem.classList.remove(CLASS_NAME_COLLAPSED)\n            } else {\n                elem.classList.add(CLASS_NAME_COLLAPSED)\n            }\n\n            elem.setAttribute('aria-expanded', isOpen)\n        })\n    }\n\n    // Static\n\n    Collapse.getInstance = function(element) {\n        return Data.get(getElement(element), this.DATA_KEY)\n    }\n\n    Collapse.getOrCreateInstance = function(element, config = {}) {\n        return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null)\n    }\n\n    Collapse.jQueryInterface = function(config) {\n        return this.each(function () {\n            const _config = {}\n            if (typeof config === 'string' && /show|hide/.test(config)) {\n                _config.toggle = false\n            }\n\n            const data = Collapse.getOrCreateInstance(this, _config)\n\n            if (typeof config === 'string') {\n                if (typeof data[config] === 'undefined') {\n                    throw new TypeError(`No method named \"${config}\"`)\n                }\n\n                data[config]()\n            }\n        })\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Data Api implementation\n     * ------------------------------------------------------------------------\n     */\n\n    EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n        // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n        if (event.target.tagName === 'A' || (event.delegateTarget && event.delegateTarget.tagName === 'A')) {\n            event.preventDefault()\n        }\n\n        const selector = getSelectorFromElement(this)\n        const selectorElements = SelectorEngine.find(selector)\n\n        selectorElements.forEach(element => {\n            Collapse.getOrCreateInstance(element, {toggle: false}).toggle()\n        })\n    })\n\n    /**\n     * ------------------------------------------------------------------------\n     * jQuery\n     * ------------------------------------------------------------------------\n     * add .Collapse to jQuery only if jQuery is present\n     */\n\n    defineJQueryPlugin(Collapse)\n\n    return Collapse;\n});\n"}
}});

require.config({"config": {
        "jsbuild":{"mage/requirejs/static.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nvar storageShim = {\n    _data: {},\n\n    /**\n     * Sets value of the specified item.\n     *\n     * @param {String} key - Key of the property.\n     * @param {*} value - Properties' value.\n     */\n    setItem: function (key, value) {\n        'use strict';\n\n        this._data[key] = value + '';\n    },\n\n    /**\n     * Retrieves specified item.\n     *\n     * @param {String} key - Key of the property to be retrieved.\n     */\n    getItem: function (key) {\n        'use strict';\n\n        return this._data[key];\n    },\n\n    /**\n     * Removes specified item.\n     *\n     * @param {String} key - Key of the property to be removed.\n     */\n    removeItem: function (key) {\n        'use strict';\n\n        delete this._data[key];\n    },\n\n    /**\n     * Removes all items.\n     */\n    clear: function () {\n        'use strict';\n\n        this._data = {};\n    }\n};\n\ndefine('buildTools', [\n], function () {\n    'use strict';\n\n    var storage,\n        storeName = 'buildDisabled';\n\n    try {\n        storage = window.localStorage;\n    } catch (e) {\n        storage = storageShim;\n    }\n\n    return {\n        isEnabled: storage.getItem(storeName) === null,\n\n        /**\n         * Removes base url from the provided string\n         *\n         * @param {String} url - Url to be processed.\n         * @param {Object} config - RequiereJs config object.\n         * @returns {String} String without base url.\n         */\n        removeBaseUrl: function (url, config) {\n            var urlParts,\n                baseUrlParts,\n                baseUrl = config.baseUrl || '',\n                index = url.indexOf(baseUrl);\n\n            if (~index) {\n                url = url.substring(baseUrl.length - index);\n            } else {\n                baseUrlParts = baseUrl.split('/');\n                baseUrlParts = baseUrlParts.slice(0, -5); // slice area/vendor/theme/locale/empty chunk\n                baseUrl = baseUrlParts.join('/');\n\n                url = url.substring(baseUrl.length);\n\n                urlParts = url.split('/');\n                urlParts = urlParts.slice(5); // slice empty chunk/area/vendor/theme/locale/\n                url = urlParts.join('/');\n            }\n\n            return url;\n        },\n\n        /**\n         * Enables build usage.\n         */\n        on: function () {\n            storage.removeItem(storeName);\n\n            location.reload();\n        },\n\n        /**\n         * Disables build usage.\n         */\n        off: function () {\n            storage.setItem(storeName, 'true');\n\n            location.reload();\n        }\n    };\n});\n\n/**\n * Module responsible for collecting statistics\n * data regarding modules that have been loader via bundle.\n */\ndefine('statistician', [\n], function () {\n    'use strict';\n\n    var storage,\n        stringify   = JSON.stringify.bind(JSON);\n\n    try {\n        storage = window.localStorage;\n    } catch (e) {\n        storage = storageShim;\n    }\n\n    /**\n     * Removes duplicated entries of array, returning new one.\n     *\n     * @param {Array} arr\n     * @returns {Array}\n     */\n    function uniq(arr) {\n        return arr.filter(function (entry, i) {\n            return arr.indexOf(entry) >= i;\n        });\n    }\n\n    /**\n     * Takes first array passed, removes all\n     * entries which further arrays contain.\n     *\n     * @returns {Array} Modified array\n     */\n    function difference() {\n        var args    = Array.prototype.slice.call(arguments),\n            target  = args.splice(0, 1)[0];\n\n        return target.filter(function (entry) {\n            return !args.some(function (arr) {\n                return !!~arr.indexOf(entry);\n            });\n        });\n    }\n\n    /**\n     * Stringifies 'data' parameter and sets it under 'key' namespace to localStorage.\n     *\n     * @param {*} data\n     * @param {String} key\n     */\n    function set(data, key) {\n        storage.setItem(key, stringify(data));\n    }\n\n    /**\n     * Gets item from localStorage by 'key' parameter, JSON.parse's it if defined.\n     * Else, returns empty array.\n     *\n     * @param   {String} key\n     * @returns {Array}\n     */\n    function getModules(key) {\n        var plain = storage.getItem(key);\n\n        return plain ? JSON.parse(plain) : [];\n    }\n\n    /**\n     * Concats 'modules' array with one that was previously stored by 'key' parameter\n     * in localStorage, removes duplicated entries from resulting array and writes\n     * it to 'key' namespace of localStorage via 'set' function.\n     *\n     * @param {Array} modules\n     * @param {String} key\n     */\n    function storeModules(modules, key) {\n        var old = getModules(key);\n\n        set(uniq(old.concat(modules)), key);\n    }\n\n    /**\n     * Creates Blob, writes passed data to it, then creates ObjectURL string\n     * with blob data. In parallel, creates 'a' element, writes resulting ObjectURL\n     * to it's href property and fileName parameter as it's download prop.\n     * Clicks on 'a' and cleans up file data.\n     *\n     * @param   {String} fileName\n     * @param   {Object} data\n     */\n    function upload(fileName, data) {\n        var a = document.createElement('a'),\n            blob,\n            url;\n\n        a.style = 'display: none';\n        document.body.appendChild(a);\n\n        blob = new Blob([JSON.stringify(data)], {\n            type: 'octet/stream'\n        });\n\n        url = window.URL.createObjectURL(blob);\n\n        a.href = url;\n        a.download = fileName;\n        a.click();\n\n        window.URL.revokeObjectURL(url);\n    }\n\n    return {\n\n        /**\n         * Stores keys of 'modules' object to localStorage under 'all' namespace.\n         *\n         * @param {Object} modules\n         */\n        collect: function (modules) {\n            storeModules(Object.keys(modules), 'all');\n        },\n\n        /**\n         * Wraps 'module' in empty array and stores it to localStorage by 'used' namespace.\n         *\n         * @param {String} module\n         */\n        utilize: function (module) {\n            storeModules([module], 'used');\n        },\n\n        /**\n         * Returns modules, stores under 'all' namespace in localStorage via\n         * getModules function.\n         *\n         * @return {Array}\n         */\n        getAll: function () {\n            return getModules('all');\n        },\n\n        /**\n         * Returns modules, stores under 'used' namespace in localStorage via\n         * getModules function.\n         *\n         * @return {Array}\n         */\n        getUsed: function () {\n            return getModules('used');\n        },\n\n        /**\n         * Returns difference between arrays stored under 'all' and 'used'.\n         *\n         * @return {Array}\n         */\n        getUnused: function () {\n            var all     = getModules('all'),\n                used    = getModules('used');\n\n            return difference(all, used);\n        },\n\n        /**\n         * Clears \"all\" and \"used\" namespaces of localStorage.\n         */\n        clear: function () {\n            storage.removeItem('all');\n            storage.removeItem('used');\n        },\n\n        /**\n         * Create blob containing stats data and download it\n         */\n        export: function () {\n            upload('Magento Bundle Statistics', {\n                used: this.getUsed(),\n                unused: this.getUnused(),\n                all:  this.getAll()\n            });\n        }\n    };\n});\n\n/**\n * Extension of a requirejs 'load' method\n * to load files from a build object.\n */\ndefine('jsbuild', [\n    'module',\n    'buildTools',\n    'statistician'\n], function (module, tools, statistician) {\n    'use strict';\n\n    var build = module.config() || {};\n\n    if (!tools.isEnabled) {\n        return;\n    }\n\n    require._load = require.load;\n\n    statistician.collect(build);\n\n    /**\n     * Overrides requirejs main loading method to provide\n     * support of scripts initialization from a bundle object.\n     *\n     * @param {Object} context\n     * @param {String} moduleName\n     * @param {String} url\n     */\n    require.load = function (context, moduleName, url) {\n        var relative = tools.removeBaseUrl(url, context.config),\n            data     = build[relative];\n\n        if (data) {\n            statistician.utilize(relative);\n\n            new Function(data)();\n\n            context.completeLoad(moduleName);\n        } else {\n            require._load.apply(require, arguments);\n        }\n    };\n});\n\n/**\n * Extension of a requirejs text plugin\n * to load files from a build object.\n */\ndefine('text', [\n    'module',\n    'buildTools',\n    'mage/requirejs/text'\n], function (module, tools, text) {\n    'use strict';\n\n    var build = module.config() || {};\n\n    if (!tools.isEnabled) {\n        return text;\n    }\n\n    text._load = text.load;\n\n    /**\n     * Overrides load method of a 'text' plugin to provide support\n     * of loading files from a build object.\n     *\n     * @param {String} name\n     * @param {Function} req\n     * @param {Function} onLoad\n     * @param {Object} config\n     */\n    text.load = function (name, req, onLoad, config) {\n        var url      = req.toUrl(name),\n            relative = tools.removeBaseUrl(url, config),\n            data     = build[relative];\n\n        data ?\n            onLoad(data) :\n            text._load.apply(text, arguments);\n    };\n\n    return text;\n});\n"}
}});

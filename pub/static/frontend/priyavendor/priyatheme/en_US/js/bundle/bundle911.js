require.config({"config": {
        "jsbuild":{"scriptaculous/builder.js":"// script.aculo.us builder.js v1.9.0, 23 Dec 2010\n// Copyright (c) 2005-2010 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)\n//\n// script.aculo.us is freely distributable under the terms of an MIT-style license.\n// For details, see the script.aculo.us web site: http://script.aculo.us/\n\nvar Builder = {\n  NODEMAP: {\n    AREA: 'map',\n    CAPTION: 'table',\n    COL: 'table',\n    COLGROUP: 'table',\n    LEGEND: 'fieldset',\n    OPTGROUP: 'select',\n    OPTION: 'select',\n    PARAM: 'object',\n    TBODY: 'table',\n    TD: 'table',\n    TFOOT: 'table',\n    TH: 'table',\n    THEAD: 'table',\n    TR: 'table'\n  },\n  // note: For Firefox < 1.5, OPTION and OPTGROUP tags are currently broken,\n  //       due to a Firefox bug\n  node: function(elementName) {\n    elementName = elementName.toUpperCase();\n\n    // try innerHTML approach\n    var parentTag = this.NODEMAP[elementName] || 'div';\n    var parentElement = document.createElement(parentTag);\n    try { // prevent IE \"feature\": http://dev.rubyonrails.org/ticket/2707\n      parentElement.innerHTML = \"<\" + elementName + \"></\" + elementName + \">\";\n    } catch(e) {}\n    var element = parentElement.firstChild || null;\n\n    // see if browser added wrapping tags\n    if(element && (element.tagName.toUpperCase() != elementName))\n      element = element.getElementsByTagName(elementName)[0];\n\n    // fallback to createElement approach\n    if(!element) element = document.createElement(elementName);\n\n    // abort if nothing could be created\n    if(!element) return;\n\n    // attributes (or text)\n    if(arguments[1])\n      if(this._isStringOrNumber(arguments[1]) ||\n        (arguments[1] instanceof Array) ||\n        arguments[1].tagName) {\n          this._children(element, arguments[1]);\n        } else {\n          var attrs = this._attributes(arguments[1]);\n          if(attrs.length) {\n            try { // prevent IE \"feature\": http://dev.rubyonrails.org/ticket/2707\n              parentElement.innerHTML = \"<\" +elementName + \" \" +\n                attrs + \"></\" + elementName + \">\";\n            } catch(e) {}\n            element = parentElement.firstChild || null;\n            // workaround firefox 1.0.X bug\n            if(!element) {\n              element = document.createElement(elementName);\n              for(attr in arguments[1])\n                element[attr == 'class' ? 'className' : attr] = arguments[1][attr];\n            }\n            if(element.tagName.toUpperCase() != elementName)\n              element = parentElement.getElementsByTagName(elementName)[0];\n          }\n        }\n\n    // text, or array of children\n    if(arguments[2])\n      this._children(element, arguments[2]);\n\n     return $(element);\n  },\n  _text: function(text) {\n     return document.createTextNode(text);\n  },\n\n  ATTR_MAP: {\n    'className': 'class',\n    'htmlFor': 'for'\n  },\n\n  _attributes: function(attributes) {\n    var attrs = [];\n    for(attribute in attributes)\n      attrs.push((attribute in this.ATTR_MAP ? this.ATTR_MAP[attribute] : attribute) +\n          '=\"' + attributes[attribute].toString().escapeHTML().gsub(/\"/,'&quot;') + '\"');\n    return attrs.join(\" \");\n  },\n  _children: function(element, children) {\n    if(children.tagName) {\n      element.appendChild(children);\n      return;\n    }\n    if(typeof children=='object') { // array can hold nodes and text\n      children.flatten().each( function(e) {\n        if(typeof e=='object')\n          element.appendChild(e);\n        else\n          if(Builder._isStringOrNumber(e))\n            element.appendChild(Builder._text(e));\n      });\n    } else\n      if(Builder._isStringOrNumber(children))\n        element.appendChild(Builder._text(children));\n  },\n  _isStringOrNumber: function(param) {\n    return(typeof param=='string' || typeof param=='number');\n  },\n  build: function(html) {\n    var element = this.node('div');\n    $(element).update(html.strip());\n    return element.down();\n  },\n  dump: function(scope) {\n    if(typeof scope != 'object' && typeof scope != 'function') scope = window; //global scope\n\n    var tags = (\"A ABBR ACRONYM ADDRESS APPLET AREA B BASE BASEFONT BDO BIG BLOCKQUOTE BODY \" +\n      \"BR BUTTON CAPTION CENTER CITE CODE COL COLGROUP DD DEL DFN DIR DIV DL DT EM FIELDSET \" +\n      \"FONT FORM FRAME FRAMESET H1 H2 H3 H4 H5 H6 HEAD HR HTML I IFRAME IMG INPUT INS ISINDEX \"+\n      \"KBD LABEL LEGEND LI LINK MAP MENU META NOFRAMES NOSCRIPT OBJECT OL OPTGROUP OPTION P \"+\n      \"PARAM PRE Q S SAMP SCRIPT SELECT SMALL SPAN STRIKE STRONG STYLE SUB SUP TABLE TBODY TD \"+\n      \"TEXTAREA TFOOT TH THEAD TITLE TR TT U UL VAR\").split(/\\s+/);\n\n    tags.each( function(tag){\n      scope[tag] = function() {\n        return Builder.node.apply(Builder, [tag].concat($A(arguments)));\n      };\n    });\n  }\n};\n"}
}});

require.config({"config": {
        "jsbuild":{"prototype/window.js":"// Copyright (c) 2006 S\u00e9bastien Gruhier (http://xilinus.com, http://itseb.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// VERSION 1.4b\n\nvar Window = Class.create();\n\nWindow.keepMultiModalWindow = false;\nWindow.hasEffectLib = (typeof Effect != 'undefined');\nWindow.resizeEffectDuration = 0.4;\n\nWindow.prototype = {\n  // Constructor\n  // Available parameters : className, blurClassName, title, minWidth, minHeight, maxWidth, maxHeight, width, height, top, left, bottom, right, resizable, zIndex, opacity, recenterAuto, wiredDrag\n  //                        hideEffect, showEffect, showEffectOptions, hideEffectOptions, effectOptions, url, draggable, closable, minimizable, maximizable, parent, onload\n  //                        add all callbacks (if you do not use an observer)\n  //                        onDestroy onStartResize onStartMove onResize onMove onEndResize onEndMove onFocus onBlur onBeforeShow onShow onHide onMinimize onMaximize onClose\n\n  initialize: function() {\n    var id;\n    var optionIndex = 0;\n    // For backward compatibility like win= new Window(\"id\", {...}) instead of win = new Window({id: \"id\", ...})\n    if (arguments.length > 0) {\n      if (typeof arguments[0] == \"string\" ) {\n        id = arguments[0];\n        optionIndex = 1;\n      }\n      else\n        id = arguments[0] ? arguments[0].id : null;\n    }\n\n    // Generate unique ID if not specified\n    if (!id)\n      id = \"window_\" + new Date().getTime();\n\n    if ($(id))\n      alert(\"Window \" + id + \" is already registered in the DOM! Make sure you use setDestroyOnClose() or destroyOnClose: true in the constructor\");\n\n    this.options = Object.extend({\n      className:         \"dialog\",\n      blurClassName:     null,\n      minWidth:          100,\n      minHeight:         20,\n      resizable:         true,\n      closable:          true,\n      minimizable:       true,\n      maximizable:       true,\n      draggable:         true,\n      userData:          null,\n      showEffect:        (Window.hasEffectLib ? Effect.Appear : Element.show),\n      hideEffect:        (Window.hasEffectLib ? Effect.Fade : Element.hide),\n      showEffectOptions: {},\n      hideEffectOptions: {},\n      effectOptions:     null,\n      parent:            document.body,\n      title:             \"&nbsp;\",\n      url:               null,\n      onload:            Prototype.emptyFunction,\n      width:             200,\n      height:            300,\n      opacity:           1,\n      recenterAuto:      true,\n      wiredDrag:         false,\n      closeCallback:     null,\n      destroyOnClose:    false,\n      gridX:             1,\n      gridY:             1\n    }, arguments[optionIndex] || {});\n    if (this.options.blurClassName)\n      this.options.focusClassName = this.options.className;\n\n    if (typeof this.options.top == \"undefined\" &&  typeof this.options.bottom ==  \"undefined\")\n      this.options.top = this._round(Math.random()*500, this.options.gridY);\n    if (typeof this.options.left == \"undefined\" &&  typeof this.options.right ==  \"undefined\")\n      this.options.left = this._round(Math.random()*500, this.options.gridX);\n\n    if (this.options.effectOptions) {\n      Object.extend(this.options.hideEffectOptions, this.options.effectOptions);\n      Object.extend(this.options.showEffectOptions, this.options.effectOptions);\n      if (this.options.showEffect == Element.Appear)\n        this.options.showEffectOptions.to = this.options.opacity;\n    }\n    if (Window.hasEffectLib) {\n      if (this.options.showEffect == Effect.Appear)\n        this.options.showEffectOptions.to = this.options.opacity;\n\n      if (this.options.hideEffect == Effect.Fade)\n        this.options.hideEffectOptions.from = this.options.opacity;\n    }\n    if (this.options.hideEffect == Element.hide)\n      this.options.hideEffect = function(){ Element.hide(this.element); if (this.options.destroyOnClose) this.destroy(); }.bind(this)\n\n    if (this.options.parent != document.body)\n      this.options.parent = $(this.options.parent);\n\n    this.element = this._createWindow(id);\n    this.element.win = this;\n\n    // Bind event listener\n    this.eventMouseDown = this._initDrag.bindAsEventListener(this);\n    this.eventMouseUp   = this._endDrag.bindAsEventListener(this);\n    this.eventMouseMove = this._updateDrag.bindAsEventListener(this);\n    this.eventOnLoad    = this._getWindowBorderSize.bindAsEventListener(this);\n    this.eventMouseDownContent = this.toFront.bindAsEventListener(this);\n    this.eventResize = this._recenter.bindAsEventListener(this);\n    this.topbar = $(this.element.id + \"_top\");\n    this.bottombar = $(this.element.id + \"_bottom\");\n    this.content = $(this.element.id + \"_content\");\n\n    Event.observe(this.topbar, \"mousedown\", this.eventMouseDown);\n    Event.observe(this.bottombar, \"mousedown\", this.eventMouseDown);\n    Event.observe(this.content, \"mousedown\", this.eventMouseDownContent);\n    Event.observe(window, \"load\", this.eventOnLoad);\n    Event.observe(window, \"resize\", this.eventResize);\n    Event.observe(window, \"scroll\", this.eventResize);\n    Event.observe(this.options.parent, \"scroll\", this.eventResize);\n\n    if (this.options.draggable)  {\n      var that = this;\n      [this.topbar, this.topbar.up().previous(), this.topbar.up().next()].each(function(element) {\n        element.observe(\"mousedown\", that.eventMouseDown);\n        element.addClassName(\"top_draggable\");\n      });\n      [this.bottombar.up(), this.bottombar.up().previous(), this.bottombar.up().next()].each(function(element) {\n        element.observe(\"mousedown\", that.eventMouseDown);\n        element.addClassName(\"bottom_draggable\");\n      });\n\n    }\n\n    if (this.options.resizable) {\n      this.sizer = $(this.element.id + \"_sizer\");\n      Event.observe(this.sizer, \"mousedown\", this.eventMouseDown);\n    }\n\n    this.useLeft = null;\n    this.useTop = null;\n    if (typeof this.options.left != \"undefined\") {\n      this.element.setStyle({left: parseFloat(this.options.left) + 'px'});\n      this.useLeft = true;\n    }\n    else {\n      this.element.setStyle({right: parseFloat(this.options.right) + 'px'});\n      this.useLeft = false;\n    }\n\n    if (typeof this.options.top != \"undefined\") {\n      this.element.setStyle({top: parseFloat(this.options.top) + 'px'});\n      this.useTop = true;\n    }\n    else {\n      this.element.setStyle({bottom: parseFloat(this.options.bottom) + 'px'});\n      this.useTop = false;\n    }\n\n    this.storedLocation = null;\n\n    this.setOpacity(this.options.opacity);\n    if (this.options.zIndex)\n      this.setZIndex(this.options.zIndex)\n\n    if (this.options.destroyOnClose)\n      this.setDestroyOnClose(true);\n\n    this._getWindowBorderSize();\n    this.width = this.options.width;\n    this.height = this.options.height;\n    this.visible = false;\n\n    this.constraint = false;\n    this.constraintPad = {top: 0, left:0, bottom:0, right:0};\n\n    if (this.width && this.height)\n      this.setSize(this.options.width, this.options.height);\n    this.setTitle(this.options.title)\n    Windows.register(this);\n  },\n    // Destructor\n  destroy: function() {\n    this._notify(\"onDestroy\");\n    Event.stopObserving(this.topbar, \"mousedown\", this.eventMouseDown);\n    Event.stopObserving(this.bottombar, \"mousedown\", this.eventMouseDown);\n    Event.stopObserving(this.content, \"mousedown\", this.eventMouseDownContent);\n\n    Event.stopObserving(window, \"load\", this.eventOnLoad);\n    Event.stopObserving(window, \"resize\", this.eventResize);\n    Event.stopObserving(window, \"scroll\", this.eventResize);\n    Event.stopObserving(this.options.parent, \"scroll\", this.eventResize);\n\n    Event.stopObserving(this.content, \"load\", this.options.onload);\n\n    if (this._oldParent) {\n      var content = this.getContent();\n      var originalContent = null;\n      for(var i = 0; i < content.childNodes.length; i++) {\n        originalContent = content.childNodes[i];\n        if (originalContent.nodeType == 1)\n          break;\n        originalContent = null;\n      }\n      if (originalContent)\n        this._oldParent.appendChild(originalContent);\n      this._oldParent = null;\n    }\n\n    if (this.sizer)\n        Event.stopObserving(this.sizer, \"mousedown\", this.eventMouseDown);\n\n    if (this.options.url)\n      this.content.src = null\n    if (this.wiredElement)\n      this.wiredElement.remove();\n     if(this.iefix)\n      Element.remove(this.iefix);\n\n    Element.remove(this.element);\n    Windows.unregister(this);\n  },\n\n  // Sets close callback, if it sets, it should return true to be able to close the window.\n  setCloseCallback: function(callback) {\n    this.options.closeCallback = callback;\n  },\n\n  // Gets window content\n  getContent: function () {\n    return this.content;\n  },\n\n  // Sets the content with an element id\n  setContent: function(id, autoresize, autoposition) {\n    var element = $(id);\n    if (null == element) throw \"Unable to find element '\" + id + \"' in DOM\";\n    this._oldParent = element.parentNode;\n\n    var d = null;\n    var p = null;\n\n    if (autoresize)\n      d = Element.getDimensions(element);\n    if (autoposition)\n      p = Position.cumulativeOffset(element);\n\n    var content = this.getContent();\n    // Clear HTML (and even iframe)\n    this.setHTMLContent(\"\");\n    content = this.getContent();\n\n    content.appendChild(element);\n    element.show();\n    if (autoresize)\n      this.setSize(d.width, d.height);\n    if (autoposition)\n      this.setLocation(p[1] - this.heightN, p[0] - this.widthW);\n  },\n\n  setHTMLContent: function(html) {\n    // It was an url (iframe), recreate a div content instead of iframe content\n    if (this.options.url) {\n      this.content.src = null;\n      this.options.url = null;\n\n  \t  var content =\"<div id=\\\"\" + this.getId() + \"_content\\\" class=\\\"\" + this.options.className + \"_content\\\"> </div>\";\n      $(this.getId() +\"_table_content\").innerHTML = content;\n\n      this.content = $(this.element.id + \"_content\");\n    }\n    this.getContent().update(html);\n    return this;\n  },\n\n  setAjaxContent: function(url, options, showCentered, showModal) {\n    this.showFunction = showCentered ? \"showCenter\" : \"show\";\n    this.showModal = showModal || false;\n\n    options = options || {};\n\n    // Clear HTML (and even iframe)\n    this.setHTMLContent(\"\");\n\n    this.onComplete = options.onComplete;\n    if (! this._onCompleteHandler)\n      this._onCompleteHandler = this._setAjaxContent.bind(this);\n    options.onComplete = this._onCompleteHandler;\n\n    new Ajax.Request(url, options);\n    options.onComplete = this.onComplete;\n  },\n\n  _setAjaxContent: function(originalRequest) {\n    Element.update(this.getContent(), originalRequest.responseText);\n    if (this.onComplete)\n      this.onComplete(originalRequest);\n    this.onComplete = null;\n    this[this.showFunction](this.showModal)\n  },\n\n  setURL: function(url) {\n    // Not an url content, change div to iframe\n    if (this.options.url)\n      this.content.src = null;\n    this.options.url = url;\n    var content= \"<iframe frameborder='0' name='\" + this.getId() + \"_content'  id='\" + this.getId() + \"_content' src='\" + url + \"' width='\" + this.width + \"' height='\" + this.height + \"'> </iframe>\";\n    $(this.getId() +\"_table_content\").innerHTML = content;\n\n    this.content = $(this.element.id + \"_content\");\n  },\n\n  getURL: function() {\n  \treturn this.options.url ? this.options.url : null;\n  },\n\n  refresh: function() {\n    if (this.options.url)\n\t    $(this.element.getAttribute('id') + '_content').src = this.options.url;\n  },\n\n  // Stores position/size in a cookie, by default named with window id\n  setCookie: function(name, expires, path, domain, secure) {\n    name = name || this.element.id;\n    this.cookie = [name, expires, path, domain, secure];\n\n    // Get cookie\n    var value = WindowUtilities.getCookie(name)\n    // If exists\n    if (value) {\n      var values = value.split(',');\n      var x = values[0].split(':');\n      var y = values[1].split(':');\n\n      var w = parseFloat(values[2]), h = parseFloat(values[3]);\n      var mini = values[4];\n      var maxi = values[5];\n\n      this.setSize(w, h);\n      if (mini == \"true\")\n        this.doMinimize = true; // Minimize will be done at onload window event\n      else if (maxi == \"true\")\n        this.doMaximize = true; // Maximize will be done at onload window event\n\n      this.useLeft = x[0] == \"l\";\n      this.useTop = y[0] == \"t\";\n\n      this.element.setStyle(this.useLeft ? {left: x[1]} : {right: x[1]});\n      this.element.setStyle(this.useTop ? {top: y[1]} : {bottom: y[1]});\n    }\n  },\n\n  // Gets window ID\n  getId: function() {\n    return this.element.id;\n  },\n\n  // Detroys itself when closing\n  setDestroyOnClose: function() {\n    this.options.destroyOnClose = true;\n  },\n\n  setConstraint: function(bool, padding) {\n    this.constraint = bool;\n    this.constraintPad = Object.extend(this.constraintPad, padding || {});\n    // Reset location to apply constraint\n    if (this.useTop && this.useLeft)\n      this.setLocation(parseFloat(this.element.style.top), parseFloat(this.element.style.left));\n  },\n\n  // initDrag event\n\n  _initDrag: function(event) {\n    // No resize on minimized window\n    if (Event.element(event) == this.sizer && this.isMinimized())\n      return;\n\n    // No move on maximzed window\n    if (Event.element(event) != this.sizer && this.isMaximized())\n      return;\n\n    if (Prototype.Browser.IE && this.heightN == 0)\n      this._getWindowBorderSize();\n\n    // Get pointer X,Y\n    this.pointer = [this._round(Event.pointerX(event), this.options.gridX), this._round(Event.pointerY(event), this.options.gridY)];\n    if (this.options.wiredDrag)\n      this.currentDrag = this._createWiredElement();\n    else\n      this.currentDrag = this.element;\n\n    // Resize\n    if (Event.element(event) == this.sizer) {\n      this.doResize = true;\n      this.widthOrg = this.width;\n      this.heightOrg = this.height;\n      this.bottomOrg = parseFloat(this.element.getStyle('bottom'));\n      this.rightOrg = parseFloat(this.element.getStyle('right'));\n      this._notify(\"onStartResize\");\n    }\n    else {\n      this.doResize = false;\n\n      // Check if click on close button,\n      var closeButton = $(this.getId() + '_close');\n      if (closeButton && Position.within(closeButton, this.pointer[0], this.pointer[1])) {\n        this.currentDrag = null;\n        return;\n      }\n\n      this.toFront();\n\n      if (! this.options.draggable)\n        return;\n      this._notify(\"onStartMove\");\n    }\n    // Register global event to capture mouseUp and mouseMove\n    Event.observe(document, \"mouseup\", this.eventMouseUp, false);\n    Event.observe(document, \"mousemove\", this.eventMouseMove, false);\n\n    // Add an invisible div to keep catching mouse event over iframes\n    WindowUtilities.disableScreen('__invisible__', '__invisible__', this.overlayOpacity);\n\n    // Stop selection while dragging\n    document.body.ondrag = function () { return false; };\n    document.body.onselectstart = function () { return false; };\n\n    this.currentDrag.show();\n    Event.stop(event);\n  },\n\n  _round: function(val, round) {\n    return round == 1 ? val  : val = Math.floor(val / round) * round;\n  },\n\n  // updateDrag event\n  _updateDrag: function(event) {\n    var pointer =  [this._round(Event.pointerX(event), this.options.gridX), this._round(Event.pointerY(event), this.options.gridY)];\n    var dx = pointer[0] - this.pointer[0];\n    var dy = pointer[1] - this.pointer[1];\n\n    // Resize case, update width/height\n    if (this.doResize) {\n      var w = this.widthOrg + dx;\n      var h = this.heightOrg + dy;\n\n      dx = this.width - this.widthOrg\n      dy = this.height - this.heightOrg\n\n      // Check if it's a right position, update it to keep upper-left corner at the same position\n      if (this.useLeft)\n        w = this._updateWidthConstraint(w)\n      else\n        this.currentDrag.setStyle({right: (this.rightOrg -dx) + 'px'});\n      // Check if it's a bottom position, update it to keep upper-left corner at the same position\n      if (this.useTop)\n        h = this._updateHeightConstraint(h)\n      else\n        this.currentDrag.setStyle({bottom: (this.bottomOrg -dy) + 'px'});\n\n      this.setSize(w , h);\n      this._notify(\"onResize\");\n    }\n    // Move case, update top/left\n    else {\n      this.pointer = pointer;\n\n      if (this.useLeft) {\n        var left =  parseFloat(this.currentDrag.getStyle('left')) + dx;\n        var newLeft = this._updateLeftConstraint(left);\n        // Keep mouse pointer correct\n        this.pointer[0] += newLeft-left;\n        this.currentDrag.setStyle({left: newLeft + 'px'});\n      }\n      else\n        this.currentDrag.setStyle({right: parseFloat(this.currentDrag.getStyle('right')) - dx + 'px'});\n\n      if (this.useTop) {\n        var top =  parseFloat(this.currentDrag.getStyle('top')) + dy;\n        var newTop = this._updateTopConstraint(top);\n        // Keep mouse pointer correct\n        this.pointer[1] += newTop - top;\n        this.currentDrag.setStyle({top: newTop + 'px'});\n      }\n      else\n        this.currentDrag.setStyle({bottom: parseFloat(this.currentDrag.getStyle('bottom')) - dy + 'px'});\n\n      this._notify(\"onMove\");\n    }\n    if (this.iefix)\n      this._fixIEOverlapping();\n\n    this._removeStoreLocation();\n    Event.stop(event);\n  },\n\n   // endDrag callback\n   _endDrag: function(event) {\n    // Remove temporary div over iframes\n     WindowUtilities.enableScreen('__invisible__');\n\n    if (this.doResize)\n      this._notify(\"onEndResize\");\n    else\n      this._notify(\"onEndMove\");\n\n    // Release event observing\n    Event.stopObserving(document, \"mouseup\", this.eventMouseUp,false);\n    Event.stopObserving(document, \"mousemove\", this.eventMouseMove, false);\n\n    Event.stop(event);\n\n    this._hideWiredElement();\n\n    // Store new location/size if need be\n    this._saveCookie()\n\n    // Restore selection\n    document.body.ondrag = null;\n    document.body.onselectstart = null;\n  },\n\n  _updateLeftConstraint: function(left) {\n    if (this.constraint && this.useLeft && this.useTop) {\n      var width = this.options.parent == document.body ? WindowUtilities.getPageSize().windowWidth : this.options.parent.getDimensions().width;\n\n      if (left < this.constraintPad.left)\n        left = this.constraintPad.left;\n      if (left + this.width + this.widthE + this.widthW > width - this.constraintPad.right)\n        left = width - this.constraintPad.right - this.width - this.widthE - this.widthW;\n    }\n    return left;\n  },\n\n  _updateTopConstraint: function(top) {\n    if (this.constraint && this.useLeft && this.useTop) {\n      var height = this.options.parent == document.body ? WindowUtilities.getPageSize().windowHeight : this.options.parent.getDimensions().height;\n\n      var h = this.height + this.heightN + this.heightS;\n\n      if (top < this.constraintPad.top)\n        top = this.constraintPad.top;\n      if (top + h > height - this.constraintPad.bottom)\n        top = height - this.constraintPad.bottom - h;\n    }\n    return top;\n  },\n\n  _updateWidthConstraint: function(w) {\n    if (this.constraint && this.useLeft && this.useTop) {\n      var width = this.options.parent == document.body ? WindowUtilities.getPageSize().windowWidth : this.options.parent.getDimensions().width;\n      var left =  parseFloat(this.element.getStyle(\"left\"));\n\n      if (left + w + this.widthE + this.widthW > width - this.constraintPad.right)\n        w = width - this.constraintPad.right - left - this.widthE - this.widthW;\n    }\n    return w;\n  },\n\n  _updateHeightConstraint: function(h) {\n    if (this.constraint && this.useLeft && this.useTop) {\n      var height = this.options.parent == document.body ? WindowUtilities.getPageSize().windowHeight : this.options.parent.getDimensions().height;\n      var top =  parseFloat(this.element.getStyle(\"top\"));\n\n      if (top + h + this.heightN + this.heightS > height - this.constraintPad.bottom)\n        h = height - this.constraintPad.bottom - top - this.heightN - this.heightS;\n    }\n    return h;\n  },\n\n\n  // Creates HTML window code\n  _createWindow: function(id) {\n    var className = this.options.className;\n    var win = document.createElement(\"div\");\n    win.setAttribute('id', id);\n    win.className = \"dialog\";\n\n    var content;\n    if (this.options.url)\n      content= \"<iframe frameborder=\\\"0\\\" name=\\\"\" + id + \"_content\\\"  id=\\\"\" + id + \"_content\\\" src=\\\"\" + this.options.url + \"\\\"> </iframe>\";\n    else\n      content =\"<div id=\\\"\" + id + \"_content\\\" class=\\\"\" +className + \"_content\\\"> </div>\";\n\n    var closeDiv = this.options.closable ? \"<div class='\"+ className +\"_close' id='\"+ id +\"_close' onclick='Windows.close(\\\"\"+ id +\"\\\", event)'> </div>\" : \"\";\n    var minDiv = this.options.minimizable ? \"<div class='\"+ className + \"_minimize' id='\"+ id +\"_minimize' onclick='Windows.minimize(\\\"\"+ id +\"\\\", event)'> </div>\" : \"\";\n    var maxDiv = this.options.maximizable ? \"<div class='\"+ className + \"_maximize' id='\"+ id +\"_maximize' onclick='Windows.maximize(\\\"\"+ id +\"\\\", event)'> </div>\" : \"\";\n    var seAttributes = this.options.resizable ? \"class='\" + className + \"_sizer' id='\" + id + \"_sizer'\" : \"class='\"  + className + \"_se'\";\n    var blank = \"../themes/default/blank.gif\";\n\n    win.innerHTML = closeDiv + minDiv + maxDiv + \"\\\n      <table id='\"+ id +\"_row1' class=\\\"top table_window\\\">\\\n        <tr>\\\n          <td class='\"+ className +\"_nw'></td>\\\n          <td class='\"+ className +\"_n'><div id='\"+ id +\"_top' class='\"+ className +\"_title title_window'>\"+ this.options.title +\"</div></td>\\\n          <td class='\"+ className +\"_ne'></td>\\\n        </tr>\\\n      </table>\\\n      <table id='\"+ id +\"_row2' class=\\\"mid table_window\\\">\\\n        <tr>\\\n          <td class='\"+ className +\"_w'></td>\\\n            <td id='\"+ id +\"_table_content' class='\"+ className +\"_content' valign='top'>\" + content + \"</td>\\\n          <td class='\"+ className +\"_e'></td>\\\n        </tr>\\\n      </table>\\\n        <table id='\"+ id +\"_row3' class=\\\"bot table_window\\\">\\\n        <tr>\\\n          <td class='\"+ className +\"_sw'></td>\\\n            <td class='\"+ className +\"_s'><div id='\"+ id +\"_bottom' class='status_bar'><span style='float:left; width:1px; height:1px'></span></div></td>\\\n            <td \" + seAttributes + \"></td>\\\n        </tr>\\\n      </table>\\\n    \";\n    Element.hide(win);\n    this.options.parent.insertBefore(win, this.options.parent.firstChild);\n    Event.observe($(id + \"_content\"), \"load\", this.options.onload);\n    return win;\n  },\n\n\n  changeClassName: function(newClassName) {\n    var className = this.options.className;\n    var id = this.getId();\n    $A([\"_close\", \"_minimize\", \"_maximize\", \"_content\"]).each(function(value) { this._toggleClassName($(id + value), className + value, newClassName + value) }.bind(this));\n    this._toggleClassName($(id + \"_top\"), className + \"_title\", newClassName + \"_title\");\n    $$(\"#\" + id + \" td\").each(function(td) {td.className = td.className.sub(className,newClassName); });\n    this.options.className = newClassName;\n    this._getWindowBorderSize();\n    this.setSize(this.width, this.height)\n  },\n\n  _toggleClassName: function(element, oldClassName, newClassName) {\n    if (element) {\n      element.removeClassName(oldClassName);\n      element.addClassName(newClassName);\n    }\n  },\n\n  // Sets window location\n  setLocation: function(top, left) {\n    top = this._updateTopConstraint(top);\n    left = this._updateLeftConstraint(left);\n\n    var e = this.currentDrag || this.element;\n    e.setStyle({top: top + 'px'});\n    e.setStyle({left: left + 'px'});\n\n    this.useLeft = true;\n    this.useTop = true;\n  },\n\n  getLocation: function() {\n    var location = {};\n    if (this.useTop)\n      location = Object.extend(location, {top: this.element.getStyle(\"top\")});\n    else\n      location = Object.extend(location, {bottom: this.element.getStyle(\"bottom\")});\n    if (this.useLeft)\n      location = Object.extend(location, {left: this.element.getStyle(\"left\")});\n    else\n      location = Object.extend(location, {right: this.element.getStyle(\"right\")});\n\n    return location;\n  },\n\n  // Gets window size\n  getSize: function() {\n    return {width: this.width, height: this.height};\n  },\n\n  // Sets window size\n  setSize: function(width, height, useEffect) {\n    width = parseFloat(width);\n    height = parseFloat(height);\n\n    // Check min and max size\n    if (!this.minimized && width < this.options.minWidth)\n      width = this.options.minWidth;\n\n    if (!this.minimized && height < this.options.minHeight)\n      height = this.options.minHeight;\n\n    if (this.options. maxHeight && height > this.options. maxHeight)\n      height = this.options. maxHeight;\n\n    if (this.options. maxWidth && width > this.options. maxWidth)\n      width = this.options. maxWidth;\n\n\n    if (this.useTop && this.useLeft && Window.hasEffectLib && Effect.ResizeWindow && useEffect) {\n      new Effect.ResizeWindow(this, null, null, width, height, {duration: Window.resizeEffectDuration});\n    } else {\n      this.width = width;\n      this.height = height;\n      var e = this.currentDrag ? this.currentDrag : this.element;\n\n      e.setStyle({width: width + this.widthW + this.widthE + \"px\"})\n      e.setStyle({height: height  + this.heightN + this.heightS + \"px\"})\n\n      // Update content size\n      if (!this.currentDrag || this.currentDrag == this.element) {\n        var content = $(this.element.id + '_content');\n        content.setStyle({height: height  + 'px'});\n        content.setStyle({width: width  + 'px'});\n      }\n    }\n  },\n\n  updateHeight: function() {\n    this.setSize(this.width, this.content.scrollHeight, true);\n  },\n\n  updateWidth: function() {\n    this.setSize(this.content.scrollWidth, this.height, true);\n  },\n\n  // Brings window to front\n  toFront: function() {\n    if (this.element.style.zIndex < Windows.maxZIndex)\n      this.setZIndex(Windows.maxZIndex + 1);\n    if (this.iefix)\n      this._fixIEOverlapping();\n  },\n\n  getBounds: function(insideOnly) {\n    if (! this.width || !this.height || !this.visible)\n      this.computeBounds();\n    var w = this.width;\n    var h = this.height;\n\n    if (!insideOnly) {\n      w += this.widthW + this.widthE;\n      h += this.heightN + this.heightS;\n    }\n    var bounds = Object.extend(this.getLocation(), {width: w + \"px\", height: h + \"px\"});\n    return bounds;\n  },\n\n  computeBounds: function() {\n     if (! this.width || !this.height) {\n      var size = WindowUtilities._computeSize(this.content.innerHTML, this.content.id, this.width, this.height, 0, this.options.className)\n      if (this.height)\n        this.width = size + 5\n      else\n        this.height = size + 5\n    }\n\n    this.setSize(this.width, this.height);\n    if (this.centered)\n      this._center(this.centerTop, this.centerLeft);\n  },\n\n  // Displays window modal state or not\n  show: function(modal) {\n    this.visible = true;\n    if (modal) {\n      // Hack for Safari !!\n      if (typeof this.overlayOpacity == \"undefined\") {\n        var that = this;\n        setTimeout(function() {that.show(modal)}, 10);\n        return;\n      }\n      Windows.addModalWindow(this);\n\n      this.modal = true;\n      this.setZIndex(Windows.maxZIndex + 1);\n      Windows.unsetOverflow(this);\n    }\n    else\n      if (!this.element.style.zIndex)\n        this.setZIndex(Windows.maxZIndex + 1);\n\n    // To restore overflow if need be\n    if (this.oldStyle)\n      this.getContent().setStyle({overflow: this.oldStyle});\n\n    this.computeBounds();\n\n    this._notify(\"onBeforeShow\");\n    if (this.options.showEffect != Element.show && this.options.showEffectOptions)\n      this.options.showEffect(this.element, this.options.showEffectOptions);\n    else\n      this.options.showEffect(this.element);\n\n    this._checkIEOverlapping();\n    WindowUtilities.focusedWindow = this\n    this._notify(\"onShow\");\n  },\n\n  // Displays window modal state or not at the center of the page\n  showCenter: function(modal, top, left) {\n    this.centered = true;\n    this.centerTop = top;\n    this.centerLeft = left;\n\n    this.show(modal);\n  },\n\n  isVisible: function() {\n    return this.visible;\n  },\n\n  _center: function(top, left) {\n    var windowScroll = WindowUtilities.getWindowScroll(this.options.parent);\n    var pageSize = WindowUtilities.getPageSize(this.options.parent);\n    if (typeof top == \"undefined\")\n      top = (pageSize.windowHeight - (this.height + this.heightN + this.heightS))/2;\n    top += windowScroll.top\n\n    if (typeof left == \"undefined\")\n      left = (pageSize.windowWidth - (this.width + this.widthW + this.widthE))/2;\n    left += windowScroll.left\n    this.setLocation(top, left);\n    this.toFront();\n  },\n\n  _recenter: function(event) {\n    if (this.centered) {\n      var pageSize = WindowUtilities.getPageSize(this.options.parent);\n      var windowScroll = WindowUtilities.getWindowScroll(this.options.parent);\n\n      // Check for this stupid IE that sends dumb events\n      if (this.pageSize && this.pageSize.windowWidth == pageSize.windowWidth && this.pageSize.windowHeight == pageSize.windowHeight &&\n          this.windowScroll.left == windowScroll.left && this.windowScroll.top == windowScroll.top)\n        return;\n      this.pageSize = pageSize;\n      this.windowScroll = windowScroll;\n      // set height of Overlay to take up whole page and show\n      if ($('overlay_modal'))\n        $('overlay_modal').setStyle({height: (pageSize.pageHeight + 'px')});\n\n      if (this.options.recenterAuto)\n        this._center(this.centerTop, this.centerLeft);\n    }\n  },\n\n  // Hides window\n  hide: function() {\n    this.visible = false;\n    if (this.modal) {\n      Windows.removeModalWindow(this);\n      Windows.resetOverflow();\n    }\n    // To avoid bug on scrolling bar\n    this.oldStyle = this.getContent().getStyle('overflow') || \"auto\"\n    this.getContent().setStyle({overflow: \"hidden\"});\n\n    this.options.hideEffect(this.element, this.options.hideEffectOptions);\n\n     if(this.iefix)\n      this.iefix.hide();\n\n    if (!this.doNotNotifyHide)\n      this._notify(\"onHide\");\n  },\n\n  close: function() {\n    // Asks closeCallback if exists\n    if (this.visible) {\n      if (this.options.closeCallback && ! this.options.closeCallback(this))\n        return;\n\n      if (this.options.destroyOnClose) {\n        var destroyFunc = this.destroy.bind(this);\n        if (this.options.hideEffectOptions.afterFinish) {\n          var func = this.options.hideEffectOptions.afterFinish;\n          this.options.hideEffectOptions.afterFinish = function() {func();destroyFunc() }\n        }\n        else\n          this.options.hideEffectOptions.afterFinish = function() {destroyFunc() }\n      }\n      Windows.updateFocusedWindow();\n\n      this.doNotNotifyHide = true;\n      this.hide();\n      this.doNotNotifyHide = false;\n      this._notify(\"onClose\");\n    }\n  },\n\n  minimize: function() {\n    if (this.isMaximized() || this.resizing)\n      return;\n\n    // Backward compatibility\n    if (this.minimized) {\n      this.restore();\n      return;\n    }\n    var r2 = $(this.getId() + \"_row2\");\n      this.minimized = true;\n\n      var dh = r2.getDimensions().height;\n      this.r2Height = dh;\n      var h  = this.element.getHeight() - dh;\n\n      if (this.useLeft && this.useTop && Window.hasEffectLib && Effect.ResizeWindow) {\n        new Effect.ResizeWindow(this, null, null, null, this.height -dh, {duration: Window.resizeEffectDuration});\n      } else  {\n        this.height -= dh;\n        this.element.setStyle({height: h + \"px\"});\n        r2.hide();\n      }\n      if (! this.useTop) {\n        var bottom = parseFloat(this.element.getStyle('bottom'));\n        this.element.setStyle({bottom: (bottom + dh) + 'px'});\n      }\n    this._notify(\"onMinimize\");\n\n    // Store new location/size if need be\n    this._saveCookie()\n  },\n\n  restore: function() {\n    if (!this.minimized || this.resizing)\n      return;\n\n    var r2 = $(this.getId() + \"_row2\");\n      this.minimized = false;\n\n      var dh = this.r2Height;\n      this.r2Height = null;\n      if (this.useLeft && this.useTop && Window.hasEffectLib && Effect.ResizeWindow) {\n        new Effect.ResizeWindow(this, null, null, null, this.height + dh, {duration: Window.resizeEffectDuration});\n      }\n      else {\n        var h  = this.element.getHeight() + dh;\n        this.height += dh;\n        this.element.setStyle({height: h + \"px\"})\n        r2.show();\n      }\n      if (! this.useTop) {\n        var bottom = parseFloat(this.element.getStyle('bottom'));\n        this.element.setStyle({bottom: (bottom - dh) + 'px'});\n      }\n      this.toFront();\n\n    // Store new location/size if need be\n    this._saveCookie();\n  },\n\n  maximize: function() {\n    if (this.isMinimized() || this.resizing)\n      return;\n\n    if (Prototype.Browser.IE && this.heightN == 0)\n      this._getWindowBorderSize();\n\n    if (this.storedLocation != null) {\n      this._restoreLocation();\n      if(this.iefix)\n        this.iefix.hide();\n    }\n    else {\n      this._storeLocation();\n      Windows.unsetOverflow(this);\n\n      var windowScroll = WindowUtilities.getWindowScroll(this.options.parent);\n      var pageSize = WindowUtilities.getPageSize(this.options.parent);\n      var left = windowScroll.left;\n      var top = windowScroll.top;\n\n      if (this.options.parent != document.body) {\n        windowScroll =  {top:0, left:0, bottom:0, right:0};\n        var dim = this.options.parent.getDimensions();\n        pageSize.windowWidth = dim.width;\n        pageSize.windowHeight = dim.height;\n        top = 0;\n        left = 0;\n      }\n\n      if (this.constraint) {\n        pageSize.windowWidth -= Math.max(0, this.constraintPad.left) + Math.max(0, this.constraintPad.right);\n        pageSize.windowHeight -= Math.max(0, this.constraintPad.top) + Math.max(0, this.constraintPad.bottom);\n        left +=  Math.max(0, this.constraintPad.left);\n        top +=  Math.max(0, this.constraintPad.top);\n      }\n\n      var width = pageSize.windowWidth - this.widthW - this.widthE;\n      var height= pageSize.windowHeight - this.heightN - this.heightS;\n\n      if (this.useLeft && this.useTop && Window.hasEffectLib && Effect.ResizeWindow) {\n        new Effect.ResizeWindow(this, top, left, width, height, {duration: Window.resizeEffectDuration});\n      }\n      else {\n        this.setSize(width, height);\n        this.element.setStyle(this.useLeft ? {left: left + \"px\"} : {right: left + \"px\"});\n        this.element.setStyle(this.useTop ? {top: top + \"px\"} : {bottom: top + \"px\"});\n      }\n\n      this.toFront();\n      if (this.iefix)\n        this._fixIEOverlapping();\n    }\n    this._notify(\"onMaximize\");\n\n    // Store new location/size if need be\n    this._saveCookie()\n  },\n\n  isMinimized: function() {\n    return this.minimized;\n  },\n\n  isMaximized: function() {\n    return (this.storedLocation != null);\n  },\n\n  setOpacity: function(opacity) {\n    if (Element.setOpacity)\n      Element.setOpacity(this.element, opacity);\n  },\n\n  setZIndex: function(zindex) {\n    this.element.setStyle({zIndex: zindex});\n    Windows.updateZindex(zindex, this);\n  },\n\n  setTitle: function(newTitle) {\n    if (!newTitle || newTitle == \"\")\n      newTitle = \"&nbsp;\";\n\n    Element.update(this.element.id + '_top', newTitle);\n  },\n\n  getTitle: function() {\n    return $(this.element.id + '_top').innerHTML;\n  },\n\n  setStatusBar: function(element) {\n    var statusBar = $(this.getId() + \"_bottom\");\n\n    if (typeof(element) == \"object\") {\n      if (this.bottombar.firstChild)\n        this.bottombar.replaceChild(element, this.bottombar.firstChild);\n      else\n        this.bottombar.appendChild(element);\n    }\n    else\n      this.bottombar.innerHTML = element;\n  },\n\n  _checkIEOverlapping: function() {\n    if(!this.iefix && (navigator.appVersion.indexOf('MSIE')>0) && (navigator.userAgent.indexOf('Opera')<0) && (this.element.getStyle('position')=='absolute')) {\n        new Insertion.After(this.element.id, '<iframe id=\"' + this.element.id + '_iefix\" '+ 'style=\"display:none;position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0);\" ' + 'src=\"javascript:false;\" frameborder=\"0\" scrolling=\"no\"></iframe>');\n        this.iefix = $(this.element.id+'_iefix');\n    }\n    if(this.iefix)\n      setTimeout(this._fixIEOverlapping.bind(this), 50);\n  },\n\n  _fixIEOverlapping: function() {\n      Position.clone(this.element, this.iefix);\n      this.iefix.style.zIndex = this.element.style.zIndex - 1;\n      this.iefix.show();\n  },\n\n  _getWindowBorderSize: function(event) {\n    // Hack to get real window border size!!\n    var div = this._createHiddenDiv(this.options.className + \"_n\")\n    this.heightN = Element.getDimensions(div).height;\n    div.parentNode.removeChild(div)\n\n    var div = this._createHiddenDiv(this.options.className + \"_s\")\n    this.heightS = Element.getDimensions(div).height;\n    div.parentNode.removeChild(div)\n\n    var div = this._createHiddenDiv(this.options.className + \"_e\")\n    this.widthE = Element.getDimensions(div).width;\n    div.parentNode.removeChild(div)\n\n    var div = this._createHiddenDiv(this.options.className + \"_w\")\n    this.widthW = Element.getDimensions(div).width;\n    div.parentNode.removeChild(div);\n\n    var div = document.createElement(\"div\");\n    div.className = \"overlay_\" + this.options.className ;\n    document.body.appendChild(div);\n    //alert(\"no timeout:\\nopacity: \" + div.getStyle(\"opacity\") + \"\\nwidth: \" + document.defaultView.getComputedStyle(div, null).width);\n    var that = this;\n\n    // Workaround for Safari!!\n    setTimeout(function() {that.overlayOpacity = ($(div).getStyle(\"opacity\")); div.parentNode.removeChild(div);}, 10);\n\n    // Workaround for IE!!\n    if (Prototype.Browser.IE) {\n      this.heightS = $(this.getId() +\"_row3\").getDimensions().height;\n      this.heightN = $(this.getId() +\"_row1\").getDimensions().height;\n    }\n\n    // Safari size fix\n    if (Prototype.Browser.WebKit && Prototype.Browser.WebKitVersion < 420)\n      this.setSize(this.width, this.height);\n    if (this.doMaximize)\n      this.maximize();\n    if (this.doMinimize)\n      this.minimize();\n  },\n\n  _createHiddenDiv: function(className) {\n    var objBody = document.body;\n    var win = document.createElement(\"div\");\n    win.setAttribute('id', this.element.id+ \"_tmp\");\n    win.className = className;\n    win.style.display = 'none';\n    win.innerHTML = '';\n    objBody.insertBefore(win, objBody.firstChild);\n    return win;\n  },\n\n  _storeLocation: function() {\n    if (this.storedLocation == null) {\n      this.storedLocation = {useTop: this.useTop, useLeft: this.useLeft,\n                             top: this.element.getStyle('top'), bottom: this.element.getStyle('bottom'),\n                             left: this.element.getStyle('left'), right: this.element.getStyle('right'),\n                             width: this.width, height: this.height };\n    }\n  },\n\n  _restoreLocation: function() {\n    if (this.storedLocation != null) {\n      this.useLeft = this.storedLocation.useLeft;\n      this.useTop = this.storedLocation.useTop;\n\n      if (this.useLeft && this.useTop && Window.hasEffectLib && Effect.ResizeWindow)\n        new Effect.ResizeWindow(this, this.storedLocation.top, this.storedLocation.left, this.storedLocation.width, this.storedLocation.height, {duration: Window.resizeEffectDuration});\n      else {\n        this.element.setStyle(this.useLeft ? {left: this.storedLocation.left} : {right: this.storedLocation.right});\n        this.element.setStyle(this.useTop ? {top: this.storedLocation.top} : {bottom: this.storedLocation.bottom});\n        this.setSize(this.storedLocation.width, this.storedLocation.height);\n      }\n\n      Windows.resetOverflow();\n      this._removeStoreLocation();\n    }\n  },\n\n  _removeStoreLocation: function() {\n    this.storedLocation = null;\n  },\n\n  _saveCookie: function() {\n    if (this.cookie) {\n      var value = \"\";\n      if (this.useLeft)\n        value += \"l:\" +  (this.storedLocation ? this.storedLocation.left : this.element.getStyle('left'))\n      else\n        value += \"r:\" + (this.storedLocation ? this.storedLocation.right : this.element.getStyle('right'))\n      if (this.useTop)\n        value += \",t:\" + (this.storedLocation ? this.storedLocation.top : this.element.getStyle('top'))\n      else\n        value += \",b:\" + (this.storedLocation ? this.storedLocation.bottom :this.element.getStyle('bottom'))\n\n      value += \",\" + (this.storedLocation ? this.storedLocation.width : this.width);\n      value += \",\" + (this.storedLocation ? this.storedLocation.height : this.height);\n      value += \",\" + this.isMinimized();\n      value += \",\" + this.isMaximized();\n      WindowUtilities.setCookie(value, this.cookie)\n    }\n  },\n\n  _createWiredElement: function() {\n    if (! this.wiredElement) {\n      if (Prototype.Browser.IE)\n        this._getWindowBorderSize();\n      var div = document.createElement(\"div\");\n      div.className = \"wired_frame \" + this.options.className + \"_wired_frame\";\n\n      div.style.position = 'absolute';\n      this.options.parent.insertBefore(div, this.options.parent.firstChild);\n      this.wiredElement = $(div);\n    }\n    if (this.useLeft)\n      this.wiredElement.setStyle({left: this.element.getStyle('left')});\n    else\n      this.wiredElement.setStyle({right: this.element.getStyle('right')});\n\n    if (this.useTop)\n      this.wiredElement.setStyle({top: this.element.getStyle('top')});\n    else\n      this.wiredElement.setStyle({bottom: this.element.getStyle('bottom')});\n\n    var dim = this.element.getDimensions();\n    this.wiredElement.setStyle({width: dim.width + \"px\", height: dim.height +\"px\"});\n\n    this.wiredElement.setStyle({zIndex: Windows.maxZIndex+30});\n    return this.wiredElement;\n  },\n\n  _hideWiredElement: function() {\n    if (! this.wiredElement || ! this.currentDrag)\n      return;\n    if (this.currentDrag == this.element)\n      this.currentDrag = null;\n    else {\n      if (this.useLeft)\n        this.element.setStyle({left: this.currentDrag.getStyle('left')});\n      else\n        this.element.setStyle({right: this.currentDrag.getStyle('right')});\n\n      if (this.useTop)\n        this.element.setStyle({top: this.currentDrag.getStyle('top')});\n      else\n        this.element.setStyle({bottom: this.currentDrag.getStyle('bottom')});\n\n      this.currentDrag.hide();\n      this.currentDrag = null;\n      if (this.doResize)\n        this.setSize(this.width, this.height);\n    }\n  },\n\n  _notify: function(eventName) {\n    if (this.options[eventName])\n      this.options[eventName](this);\n    else\n      Windows.notify(eventName, this);\n  }\n};\n\n// Windows containers, register all page windows\nvar Windows = {\n  windows: [],\n  modalWindows: [],\n  observers: [],\n  focusedWindow: null,\n  maxZIndex: 0,\n  overlayShowEffectOptions: {duration: 0.5},\n  overlayHideEffectOptions: {duration: 0.5},\n\n  addObserver: function(observer) {\n    this.removeObserver(observer);\n    this.observers.push(observer);\n  },\n\n  removeObserver: function(observer) {\n    this.observers = this.observers.reject( function(o) { return o==observer });\n  },\n\n  // onDestroy onStartResize onStartMove onResize onMove onEndResize onEndMove onFocus onBlur onBeforeShow onShow onHide onMinimize onMaximize onClose\n  notify: function(eventName, win) {\n    this.observers.each( function(o) {if(o[eventName]) o[eventName](eventName, win);});\n  },\n\n  // Gets window from its id\n  getWindow: function(id) {\n    return this.windows.detect(function(d) { return d.getId() ==id });\n  },\n\n  // Gets the last focused window\n  getFocusedWindow: function() {\n    return this.focusedWindow;\n  },\n\n  updateFocusedWindow: function() {\n    this.focusedWindow = this.windows.length >=2 ? this.windows[this.windows.length-2] : null;\n  },\n\n  // Add a modal window in the stack\n  addModalWindow: function(win) {\n    // Disable screen if first modal window\n    if (this.modalWindows.length == 0) {\n      WindowUtilities.disableScreen(win.options.className, 'overlay_modal', win.overlayOpacity, win.getId(), win.options.parent);\n    }\n    else {\n      // Move overlay over all windows\n      if (Window.keepMultiModalWindow) {\n        $('overlay_modal').style.zIndex = Windows.maxZIndex + 1;\n        Windows.maxZIndex += 1;\n        WindowUtilities._hideSelect(this.modalWindows.last().getId());\n      }\n      // Hide current modal window\n      else\n        this.modalWindows.last().element.hide();\n      // Fucking IE select issue\n      WindowUtilities._showSelect(win.getId());\n    }\n    this.modalWindows.push(win);\n  },\n\n  removeModalWindow: function(win) {\n    this.modalWindows.pop();\n\n    // No more modal windows\n    if (this.modalWindows.length == 0)\n      WindowUtilities.enableScreen();\n    else {\n      if (Window.keepMultiModalWindow) {\n        this.modalWindows.last().toFront();\n        WindowUtilities._showSelect(this.modalWindows.last().getId());\n      }\n      else\n        this.modalWindows.last().element.show();\n    }\n  },\n\n  // Registers a new window (called by Windows constructor)\n  register: function(win) {\n    this.windows.push(win);\n  },\n\n  // Unregisters a window (called by Windows destructor)\n  unregister: function(win) {\n    this.windows = this.windows.reject(function(d) { return d==win });\n  },\n\n  // Closes all windows\n  closeAll: function() {\n    this.windows.each( function(w) {Windows.close(w.getId())} );\n  },\n\n  closeAllModalWindows: function() {\n    WindowUtilities.enableScreen();\n    this.modalWindows.each( function(win) {if (win) win.close()});\n  },\n\n  // Minimizes a window with its id\n  minimize: function(id, event) {\n    var win = this.getWindow(id)\n    if (win && win.visible)\n      win.minimize();\n    Event.stop(event);\n  },\n\n  // Maximizes a window with its id\n  maximize: function(id, event) {\n    var win = this.getWindow(id)\n    if (win && win.visible)\n      win.maximize();\n    Event.stop(event);\n  },\n\n  // Closes a window with its id\n  close: function(id, event) {\n    var win = this.getWindow(id);\n    if (win)\n      win.close();\n    if (event)\n      Event.stop(event);\n  },\n\n  blur: function(id) {\n    var win = this.getWindow(id);\n    if (!win)\n      return;\n    if (win.options.blurClassName)\n      win.changeClassName(win.options.blurClassName);\n    if (this.focusedWindow == win)\n      this.focusedWindow = null;\n    win._notify(\"onBlur\");\n  },\n\n  focus: function(id) {\n    var win = this.getWindow(id);\n    if (!win)\n      return;\n    if (this.focusedWindow)\n      this.blur(this.focusedWindow.getId())\n\n    if (win.options.focusClassName)\n      win.changeClassName(win.options.focusClassName);\n    this.focusedWindow = win;\n    win._notify(\"onFocus\");\n  },\n\n  unsetOverflow: function(except) {\n    this.windows.each(function(d) { d.oldOverflow = d.getContent().getStyle(\"overflow\") || \"auto\" ; d.getContent().setStyle({overflow: \"hidden\"}) });\n    if (except && except.oldOverflow)\n      except.getContent().setStyle({overflow: except.oldOverflow});\n  },\n\n  resetOverflow: function() {\n    this.windows.each(function(d) { if (d.oldOverflow) d.getContent().setStyle({overflow: d.oldOverflow}) });\n  },\n\n  updateZindex: function(zindex, win) {\n    if (zindex > this.maxZIndex) {\n      this.maxZIndex = zindex;\n      if (this.focusedWindow)\n        this.blur(this.focusedWindow.getId())\n    }\n    this.focusedWindow = win;\n    if (this.focusedWindow)\n      this.focus(this.focusedWindow.getId())\n  }\n};\n\nvar Dialog = {\n  dialogId: null,\n  onCompleteFunc: null,\n  callFunc: null,\n  parameters: null,\n\n  confirm: function(content, parameters) {\n    // Get Ajax return before\n    if (content && typeof content != \"string\") {\n      Dialog._runAjaxRequest(content, parameters, Dialog.confirm);\n      return\n    }\n    content = content || \"\";\n\n    parameters = parameters || {};\n    var okLabel = parameters.okLabel ? parameters.okLabel : \"Ok\";\n    var cancelLabel = parameters.cancelLabel ? parameters.cancelLabel : \"Cancel\";\n\n    // Backward compatibility\n    parameters = Object.extend(parameters, parameters.windowParameters || {});\n    parameters.windowParameters = parameters.windowParameters || {};\n\n    parameters.className = parameters.className || \"alert\";\n\n    var okButtonClass = \"class ='\" + (parameters.buttonClass ? parameters.buttonClass + \" \" : \"\") + \" ok_button'\"\n    var cancelButtonClass = \"class ='\" + (parameters.buttonClass ? parameters.buttonClass + \" \" : \"\") + \" cancel_button'\"\n    var content = \"\\\n      <div class='\" + parameters.className + \"_message'>\" + content  + \"</div>\\\n        <div class='\" + parameters.className + \"_buttons'>\\\n          <input type='button' value='\" + okLabel + \"' onclick='Dialog.okCallback()' \" + okButtonClass + \"/>\\\n          <input type='button' value='\" + cancelLabel + \"' onclick='Dialog.cancelCallback()' \" + cancelButtonClass + \"/>\\\n        </div>\\\n    \";\n    return this._openDialog(content, parameters)\n  },\n\n  alert: function(content, parameters) {\n    // Get Ajax return before\n    if (content && typeof content != \"string\") {\n      Dialog._runAjaxRequest(content, parameters, Dialog.alert);\n      return\n    }\n    content = content || \"\";\n\n    parameters = parameters || {};\n    var okLabel = parameters.okLabel ? parameters.okLabel : \"Ok\";\n\n    // Backward compatibility\n    parameters = Object.extend(parameters, parameters.windowParameters || {});\n    parameters.windowParameters = parameters.windowParameters || {};\n\n    parameters.className = parameters.className || \"alert\";\n\n    var okButtonClass = \"class ='\" + (parameters.buttonClass ? parameters.buttonClass + \" \" : \"\") + \" ok_button'\"\n    var content = \"\\\n      <div class='\" + parameters.className + \"_message'>\" + content  + \"</div>\\\n        <div class='\" + parameters.className + \"_buttons'>\\\n          <input type='button' value='\" + okLabel + \"' onclick='Dialog.okCallback()' \" + okButtonClass + \"/>\\\n        </div>\";\n    return this._openDialog(content, parameters)\n  },\n\n  info: function(content, parameters) {\n    // Get Ajax return before\n    if (content && typeof content != \"string\") {\n      Dialog._runAjaxRequest(content, parameters, Dialog.info);\n      return\n    }\n    content = content || \"\";\n\n    // Backward compatibility\n    parameters = parameters || {};\n    parameters = Object.extend(parameters, parameters.windowParameters || {});\n    parameters.windowParameters = parameters.windowParameters || {};\n\n    parameters.className = parameters.className || \"alert\";\n\n    var content = \"<div id='modal_dialog_message' class='\" + parameters.className + \"_message'>\" + content  + \"</div>\";\n    if (parameters.showProgress)\n      content += \"<div id='modal_dialog_progress' class='\" + parameters.className + \"_progress'>  </div>\";\n\n    parameters.ok = null;\n    parameters.cancel = null;\n\n    return this._openDialog(content, parameters)\n  },\n\n  setInfoMessage: function(message) {\n    $('modal_dialog_message').update(message);\n  },\n\n  closeInfo: function() {\n    Windows.close(this.dialogId);\n  },\n\n  _openDialog: function(content, parameters) {\n    var className = parameters.className;\n\n    if (! parameters.height && ! parameters.width) {\n      parameters.width = WindowUtilities.getPageSize((parameters.options && parameters.options.parent) || document.body).pageWidth / 2;\n    }\n    if (parameters.id)\n      this.dialogId = parameters.id;\n    else {\n      var t = new Date();\n      this.dialogId = 'modal_dialog_' + t.getTime();\n      parameters.id = this.dialogId;\n    }\n\n    // compute height or width if need be\n    if (! parameters.height || ! parameters.width) {\n      var size = WindowUtilities._computeSize(content, this.dialogId, parameters.width, parameters.height, 5, className)\n      if (parameters.height)\n        parameters.width = size + 5\n      else\n        parameters.height = size + 5\n    }\n    parameters.effectOptions = parameters.effectOptions ;\n    parameters.resizable   = parameters.resizable || false;\n    parameters.minimizable = parameters.minimizable || false;\n    parameters.maximizable = parameters.maximizable ||  false;\n    parameters.draggable   = parameters.draggable || false;\n    parameters.closable    = parameters.closable || false;\n\n    var win = new Window(parameters);\n    if (!parameters.url) {\n      win.setHTMLContent(content);\n    }\n    win.showCenter(true, parameters.top, parameters.left);\n    win.setDestroyOnClose();\n\n    win.cancelCallback = parameters.onCancel || parameters.cancel;\n    win.okCallback = parameters.onOk || parameters.ok;\n\n    return win;\n  },\n\n  _getAjaxContent: function(originalRequest)  {\n      Dialog.callFunc(originalRequest.responseText, Dialog.parameters)\n  },\n\n  _runAjaxRequest: function(message, parameters, callFunc) {\n    if (message.options == null)\n      message.options = {}\n    Dialog.onCompleteFunc = message.options.onComplete;\n    Dialog.parameters = parameters;\n    Dialog.callFunc = callFunc;\n\n    message.options.onComplete = Dialog._getAjaxContent;\n    new Ajax.Request(message.url, message.options);\n  },\n\n  okCallback: function() {\n    var win = Windows.focusedWindow;\n    if (!win.okCallback || win.okCallback(win)) {\n      // Remove onclick on button\n      $$(\"#\" + win.getId()+\" input\").each(function(element) {element.onclick=null;})\n      win.close();\n    }\n  },\n\n  cancelCallback: function() {\n    var win = Windows.focusedWindow;\n    // Remove onclick on button\n    $$(\"#\" + win.getId()+\" input\").each(function(element) {element.onclick=null})\n    win.close();\n    if (win.cancelCallback)\n      win.cancelCallback(win);\n  }\n}\n/*\n  Based on Lightbox JS: Fullsize Image Overlays\n  by Lokesh Dhakar - http://www.huddletogether.com\n\n  For more information on this script, visit:\n  http://huddletogether.com/projects/lightbox/\n\n  Licensed under the Creative Commons Attribution 2.5 License - http://creativecommons.org/licenses/by/2.5/\n  (basically, do anything you want, just leave my name and link)\n*/\n\nif (Prototype.Browser.WebKit) {\n  var array = navigator.userAgent.match(new RegExp(/AppleWebKit\\/([\\d\\.\\+]*)/));\n  Prototype.Browser.WebKitVersion = parseFloat(array[1]);\n}\n\nvar WindowUtilities = {\n  // From dragdrop.js\n  getWindowScroll: function(parent) {\n    var T, L, W, H;\n    parent = parent || document.body;\n    if (parent != document.body) {\n      T = parent.scrollTop;\n      L = parent.scrollLeft;\n      W = parent.scrollWidth;\n      H = parent.scrollHeight;\n    }\n    else {\n      var w = window;\n      with (w.document) {\n        if (w.document.documentElement && documentElement.scrollTop) {\n          T = documentElement.scrollTop;\n          L = documentElement.scrollLeft;\n        } else if (w.document.body) {\n          T = body.scrollTop;\n          L = body.scrollLeft;\n        }\n        if (w.innerWidth) {\n          W = w.innerWidth;\n          H = w.innerHeight;\n        } else if (w.document.documentElement && documentElement.clientWidth) {\n          W = documentElement.clientWidth;\n          H = documentElement.clientHeight;\n        } else {\n          W = body.offsetWidth;\n          H = body.offsetHeight\n        }\n      }\n    }\n    return { top: T, left: L, width: W, height: H };\n  },\n  //\n  // getPageSize()\n  // Returns array with page width, height and window width, height\n  // Core code from - quirksmode.org\n  // Edit for Firefox by pHaez\n  //\n  getPageSize: function(parent){\n    parent = parent || document.body;\n    var windowWidth, windowHeight;\n    var pageHeight, pageWidth;\n    if (parent != document.body) {\n      windowWidth = parent.getWidth();\n      windowHeight = parent.getHeight();\n      pageWidth = parent.scrollWidth;\n      pageHeight = parent.scrollHeight;\n    }\n    else {\n      var xScroll, yScroll;\n\n      if (window.innerHeight && window.scrollMaxY) {\n        xScroll = document.body.scrollWidth;\n        yScroll = window.innerHeight + window.scrollMaxY;\n      } else if (document.body.scrollHeight > document.body.offsetHeight){ // all but Explorer Mac\n        xScroll = document.body.scrollWidth;\n        yScroll = document.body.scrollHeight;\n      } else { // Explorer Mac...would also work in Explorer 6 Strict, Mozilla and Safari\n        xScroll = document.body.offsetWidth;\n        yScroll = document.body.offsetHeight;\n      }\n\n\n      if (self.innerHeight) {  // all except Explorer\n        windowWidth = self.innerWidth;\n        windowHeight = self.innerHeight;\n      } else if (document.documentElement && document.documentElement.clientHeight) { // Explorer 6 Strict Mode\n        windowWidth = document.documentElement.clientWidth;\n        windowHeight = document.documentElement.clientHeight;\n      } else if (document.body) { // other Explorers\n        windowWidth = document.body.clientWidth;\n        windowHeight = document.body.clientHeight;\n      }\n\n      // for small pages with total height less then height of the viewport\n      if(yScroll < windowHeight){\n        pageHeight = windowHeight;\n      } else {\n        pageHeight = yScroll;\n      }\n\n      // for small pages with total width less then width of the viewport\n      if(xScroll < windowWidth){\n        pageWidth = windowWidth;\n      } else {\n        pageWidth = xScroll;\n      }\n    }\n    return {pageWidth: pageWidth ,pageHeight: pageHeight , windowWidth: windowWidth, windowHeight: windowHeight};\n  },\n\n  disableScreen: function(className, overlayId, overlayOpacity, contentId, parent) {\n    WindowUtilities.initLightbox(overlayId, className, function() {this._disableScreen(className, overlayId, overlayOpacity, contentId)}.bind(this), parent || document.body);\n  },\n\n  _disableScreen: function(className, overlayId, overlayOpacity, contentId) {\n    // prep objects\n    var objOverlay = $(overlayId);\n\n    var pageSize = WindowUtilities.getPageSize(objOverlay.parentNode);\n\n    // Hide select boxes as they will 'peek' through the image in IE, store old value\n    if (contentId && Prototype.Browser.IE) {\n      WindowUtilities._hideSelect();\n      WindowUtilities._showSelect(contentId);\n    }\n\n    // set height of Overlay to take up whole page and show\n    objOverlay.style.height = (pageSize.pageHeight + 'px');\n    objOverlay.style.display = 'none';\n    if (overlayId == \"overlay_modal\" && Window.hasEffectLib && Windows.overlayShowEffectOptions) {\n      objOverlay.overlayOpacity = overlayOpacity;\n      new Effect.Appear(objOverlay, Object.extend({from: 0, to: overlayOpacity}, Windows.overlayShowEffectOptions));\n    }\n    else\n      objOverlay.style.display = \"block\";\n  },\n\n  enableScreen: function(id) {\n    id = id || 'overlay_modal';\n    var objOverlay =  $(id);\n    if (objOverlay) {\n      // hide lightbox and overlay\n      if (id == \"overlay_modal\" && Window.hasEffectLib && Windows.overlayHideEffectOptions)\n        new Effect.Fade(objOverlay, Object.extend({from: objOverlay.overlayOpacity, to:0}, Windows.overlayHideEffectOptions));\n      else {\n        objOverlay.style.display = 'none';\n        objOverlay.parentNode.removeChild(objOverlay);\n      }\n\n      // make select boxes visible using old value\n      if (id != \"__invisible__\")\n        WindowUtilities._showSelect();\n    }\n  },\n\n  _hideSelect: function(id) {\n    if (Prototype.Browser.IE) {\n      id = id ==  null ? \"\" : \"#\" + id + \" \";\n      $$(id + 'select').each(function(element) {\n        if (! WindowUtilities.isDefined(element.oldVisibility)) {\n          element.oldVisibility = element.style.visibility ? element.style.visibility : \"visible\";\n          element.style.visibility = \"hidden\";\n        }\n      });\n    }\n  },\n\n  _showSelect: function(id) {\n    if (Prototype.Browser.IE) {\n      id = id ==  null ? \"\" : \"#\" + id + \" \";\n      $$(id + 'select').each(function(element) {\n        if (WindowUtilities.isDefined(element.oldVisibility)) {\n          // Why?? Ask IE\n          try {\n            element.style.visibility = element.oldVisibility;\n          } catch(e) {\n            element.style.visibility = \"visible\";\n          }\n          element.oldVisibility = null;\n        }\n        else {\n          if (element.style.visibility)\n            element.style.visibility = \"visible\";\n        }\n      });\n    }\n  },\n\n  isDefined: function(object) {\n    return typeof(object) != \"undefined\" && object != null;\n  },\n\n  // initLightbox()\n  // Function runs on window load, going through link tags looking for rel=\"lightbox\".\n  // These links receive onclick events that enable the lightbox display for their targets.\n  // The function also inserts html markup at the top of the page which will be used as a\n  // container for the overlay pattern and the inline image.\n  initLightbox: function(id, className, doneHandler, parent) {\n    // Already done, just update zIndex\n    if ($(id)) {\n      Element.setStyle(id, {zIndex: Windows.maxZIndex + 1});\n      Windows.maxZIndex++;\n      doneHandler();\n    }\n    // create overlay div and hardcode some functional styles (aesthetic styles are in CSS file)\n    else {\n      var objOverlay = document.createElement(\"div\");\n      objOverlay.setAttribute('id', id);\n      objOverlay.className = \"overlay_\" + className\n      objOverlay.style.display = 'none';\n      objOverlay.style.position = 'absolute';\n      objOverlay.style.top = '0';\n      objOverlay.style.left = '0';\n      objOverlay.style.zIndex = Windows.maxZIndex + 1;\n      Windows.maxZIndex++;\n      objOverlay.style.width = '100%';\n      parent.insertBefore(objOverlay, parent.firstChild);\n      if (Prototype.Browser.WebKit && id == \"overlay_modal\") {\n        setTimeout(function() {doneHandler()}, 10);\n      }\n      else\n        doneHandler();\n    }\n  },\n\n  setCookie: function(value, parameters) {\n    document.cookie= parameters[0] + \"=\" + escape(value) +\n      ((parameters[1]) ? \"; expires=\" + parameters[1].toGMTString() : \"\") +\n      ((parameters[2]) ? \"; path=\" + parameters[2] : \"\") +\n      ((parameters[3]) ? \"; domain=\" + parameters[3] : \"\") +\n      ((parameters[4]) ? \"; secure\" : \"\");\n  },\n\n  getCookie: function(name) {\n    var dc = document.cookie;\n    var prefix = name + \"=\";\n    var begin = dc.indexOf(\"; \" + prefix);\n    if (begin == -1) {\n      begin = dc.indexOf(prefix);\n      if (begin != 0) return null;\n    } else {\n      begin += 2;\n    }\n    var end = document.cookie.indexOf(\";\", begin);\n    if (end == -1) {\n      end = dc.length;\n    }\n    return unescape(dc.substring(begin + prefix.length, end));\n  },\n\n  _computeSize: function(content, id, width, height, margin, className) {\n    var objBody = document.body;\n    var tmpObj = document.createElement(\"div\");\n    tmpObj.setAttribute('id', id);\n    tmpObj.className = className + \"_content\";\n\n    if (height)\n      tmpObj.style.height = height + \"px\"\n    else\n      tmpObj.style.width = width + \"px\"\n\n    tmpObj.style.position = 'absolute';\n    tmpObj.style.top = '0';\n    tmpObj.style.left = '0';\n    tmpObj.style.display = 'none';\n\n    tmpObj.innerHTML = content.stripScripts();\n    objBody.insertBefore(tmpObj, objBody.firstChild);\n\n    var size;\n    if (height)\n      size = $(tmpObj).getDimensions().width + margin;\n    else\n      size = $(tmpObj).getDimensions().height + margin;\n    objBody.removeChild(tmpObj);\n    return size;\n  }\n}\n\n"}
}});

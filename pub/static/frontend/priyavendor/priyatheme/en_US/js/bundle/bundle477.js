require.config({"config": {
        "jsbuild":{"Magento_Customer/js/zxcvbn.js":"/*\n * Realistic Password Strength Estimator v4.2.0\n *\n * Copyright (c) 2012-2015 Dan Wheeler and Dropbox, Inc.\n *\n * See https://github.com/dropbox/zxcvbn/blob/master/LICENSE.txt\n */\n(function (f) {\n    if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n        module.exports = f()\n    } else if (typeof define === \"function\" && define.amd) {\n        define([], f)\n    } else {\n        var g;\n        if (typeof window !== \"undefined\") {\n            g = window\n        } else if (typeof global !== \"undefined\") {\n            g = global\n        } else if (typeof self !== \"undefined\") {\n            g = self\n        } else {\n            g = this\n        }\n        g.zxcvbn = f()\n    }\n})(function () {\n    var define, module, exports;\n    return (function e(t, n, r) {\n        function s(o, u) {\n            if (!n[o]) {\n                if (!t[o]) {\n                    var a = typeof require == \"function\" && require;\n                    if (!u && a)return a(o, !0);\n                    if (i)return i(o, !0);\n                    var f = new Error(\"Cannot find module '\" + o + \"'\");\n                    throw f.code = \"MODULE_NOT_FOUND\", f\n                }\n                var l = n[o] = {exports: {}};\n                t[o][0].call(l.exports, function (e) {\n                    var n = t[o][1][e];\n                    return s(n ? n : e)\n                }, l, l.exports, e, t, n, r)\n            }\n            return n[o].exports\n        }\n\n        var i = typeof require == \"function\" && require;\n        for (var o = 0; o < r.length; o++)s(r[o]);\n        return s\n    })({\n        1: [function (require, module, exports) {\n            var adjacency_graphs;\n            adjacency_graphs = {\n                qwerty: {\n                    \"!\": [\"`~\", null, null, \"2@\", \"qQ\", null],\n                    '\"': [\";:\", \"[{\", \"]}\", null, null, \"/?\"],\n                    \"#\": [\"2@\", null, null, \"4$\", \"eE\", \"wW\"],\n                    $: [\"3#\", null, null, \"5%\", \"rR\", \"eE\"],\n                    \"%\": [\"4$\", null, null, \"6^\", \"tT\", \"rR\"],\n                    \"&\": [\"6^\", null, null, \"8*\", \"uU\", \"yY\"],\n                    \"'\": [\";:\", \"[{\", \"]}\", null, null, \"/?\"],\n                    \"(\": [\"8*\", null, null, \"0)\", \"oO\", \"iI\"],\n                    \")\": [\"9(\", null, null, \"-_\", \"pP\", \"oO\"],\n                    \"*\": [\"7&\", null, null, \"9(\", \"iI\", \"uU\"],\n                    \"+\": [\"-_\", null, null, null, \"]}\", \"[{\"],\n                    \",\": [\"mM\", \"kK\", \"lL\", \".>\", null, null],\n                    \"-\": [\"0)\", null, null, \"=+\", \"[{\", \"pP\"],\n                    \".\": [\",<\", \"lL\", \";:\", \"/?\", null, null],\n                    \"/\": [\".>\", \";:\", \"'\\\"\", null, null, null],\n                    0: [\"9(\", null, null, \"-_\", \"pP\", \"oO\"],\n                    1: [\"`~\", null, null, \"2@\", \"qQ\", null],\n                    2: [\"1!\", null, null, \"3#\", \"wW\", \"qQ\"],\n                    3: [\"2@\", null, null, \"4$\", \"eE\", \"wW\"],\n                    4: [\"3#\", null, null, \"5%\", \"rR\", \"eE\"],\n                    5: [\"4$\", null, null, \"6^\", \"tT\", \"rR\"],\n                    6: [\"5%\", null, null, \"7&\", \"yY\", \"tT\"],\n                    7: [\"6^\", null, null, \"8*\", \"uU\", \"yY\"],\n                    8: [\"7&\", null, null, \"9(\", \"iI\", \"uU\"],\n                    9: [\"8*\", null, null, \"0)\", \"oO\", \"iI\"],\n                    \":\": [\"lL\", \"pP\", \"[{\", \"'\\\"\", \"/?\", \".>\"],\n                    \";\": [\"lL\", \"pP\", \"[{\", \"'\\\"\", \"/?\", \".>\"],\n                    \"<\": [\"mM\", \"kK\", \"lL\", \".>\", null, null],\n                    \"=\": [\"-_\", null, null, null, \"]}\", \"[{\"],\n                    \">\": [\",<\", \"lL\", \";:\", \"/?\", null, null],\n                    \"?\": [\".>\", \";:\", \"'\\\"\", null, null, null],\n                    \"@\": [\"1!\", null, null, \"3#\", \"wW\", \"qQ\"],\n                    A: [null, \"qQ\", \"wW\", \"sS\", \"zZ\", null],\n                    B: [\"vV\", \"gG\", \"hH\", \"nN\", null, null],\n                    C: [\"xX\", \"dD\", \"fF\", \"vV\", null, null],\n                    D: [\"sS\", \"eE\", \"rR\", \"fF\", \"cC\", \"xX\"],\n                    E: [\"wW\", \"3#\", \"4$\", \"rR\", \"dD\", \"sS\"],\n                    F: [\"dD\", \"rR\", \"tT\", \"gG\", \"vV\", \"cC\"],\n                    G: [\"fF\", \"tT\", \"yY\", \"hH\", \"bB\", \"vV\"],\n                    H: [\"gG\", \"yY\", \"uU\", \"jJ\", \"nN\", \"bB\"],\n                    I: [\"uU\", \"8*\", \"9(\", \"oO\", \"kK\", \"jJ\"],\n                    J: [\"hH\", \"uU\", \"iI\", \"kK\", \"mM\", \"nN\"],\n                    K: [\"jJ\", \"iI\", \"oO\", \"lL\", \",<\", \"mM\"],\n                    L: [\"kK\", \"oO\", \"pP\", \";:\", \".>\", \",<\"],\n                    M: [\"nN\", \"jJ\", \"kK\", \",<\", null, null],\n                    N: [\"bB\", \"hH\", \"jJ\", \"mM\", null, null],\n                    O: [\"iI\", \"9(\", \"0)\", \"pP\", \"lL\", \"kK\"],\n                    P: [\"oO\", \"0)\", \"-_\", \"[{\", \";:\", \"lL\"],\n                    Q: [null, \"1!\", \"2@\", \"wW\", \"aA\", null],\n                    R: [\"eE\", \"4$\", \"5%\", \"tT\", \"fF\", \"dD\"],\n                    S: [\"aA\", \"wW\", \"eE\", \"dD\", \"xX\", \"zZ\"],\n                    T: [\"rR\", \"5%\", \"6^\", \"yY\", \"gG\", \"fF\"],\n                    U: [\"yY\", \"7&\", \"8*\", \"iI\", \"jJ\", \"hH\"],\n                    V: [\"cC\", \"fF\", \"gG\", \"bB\", null, null],\n                    W: [\"qQ\", \"2@\", \"3#\", \"eE\", \"sS\", \"aA\"],\n                    X: [\"zZ\", \"sS\", \"dD\", \"cC\", null, null],\n                    Y: [\"tT\", \"6^\", \"7&\", \"uU\", \"hH\", \"gG\"],\n                    Z: [null, \"aA\", \"sS\", \"xX\", null, null],\n                    \"[\": [\"pP\", \"-_\", \"=+\", \"]}\", \"'\\\"\", \";:\"],\n                    \"\\\\\": [\"]}\", null, null, null, null, null],\n                    \"]\": [\"[{\", \"=+\", null, \"\\\\|\", null, \"'\\\"\"],\n                    \"^\": [\"5%\", null, null, \"7&\", \"yY\", \"tT\"],\n                    _: [\"0)\", null, null, \"=+\", \"[{\", \"pP\"],\n                    \"`\": [null, null, null, \"1!\", null, null],\n                    a: [null, \"qQ\", \"wW\", \"sS\", \"zZ\", null],\n                    b: [\"vV\", \"gG\", \"hH\", \"nN\", null, null],\n                    c: [\"xX\", \"dD\", \"fF\", \"vV\", null, null],\n                    d: [\"sS\", \"eE\", \"rR\", \"fF\", \"cC\", \"xX\"],\n                    e: [\"wW\", \"3#\", \"4$\", \"rR\", \"dD\", \"sS\"],\n                    f: [\"dD\", \"rR\", \"tT\", \"gG\", \"vV\", \"cC\"],\n                    g: [\"fF\", \"tT\", \"yY\", \"hH\", \"bB\", \"vV\"],\n                    h: [\"gG\", \"yY\", \"uU\", \"jJ\", \"nN\", \"bB\"],\n                    i: [\"uU\", \"8*\", \"9(\", \"oO\", \"kK\", \"jJ\"],\n                    j: [\"hH\", \"uU\", \"iI\", \"kK\", \"mM\", \"nN\"],\n                    k: [\"jJ\", \"iI\", \"oO\", \"lL\", \",<\", \"mM\"],\n                    l: [\"kK\", \"oO\", \"pP\", \";:\", \".>\", \",<\"],\n                    m: [\"nN\", \"jJ\", \"kK\", \",<\", null, null],\n                    n: [\"bB\", \"hH\", \"jJ\", \"mM\", null, null],\n                    o: [\"iI\", \"9(\", \"0)\", \"pP\", \"lL\", \"kK\"],\n                    p: [\"oO\", \"0)\", \"-_\", \"[{\", \";:\", \"lL\"],\n                    q: [null, \"1!\", \"2@\", \"wW\", \"aA\", null],\n                    r: [\"eE\", \"4$\", \"5%\", \"tT\", \"fF\", \"dD\"],\n                    s: [\"aA\", \"wW\", \"eE\", \"dD\", \"xX\", \"zZ\"],\n                    t: [\"rR\", \"5%\", \"6^\", \"yY\", \"gG\", \"fF\"],\n                    u: [\"yY\", \"7&\", \"8*\", \"iI\", \"jJ\", \"hH\"],\n                    v: [\"cC\", \"fF\", \"gG\", \"bB\", null, null],\n                    w: [\"qQ\", \"2@\", \"3#\", \"eE\", \"sS\", \"aA\"],\n                    x: [\"zZ\", \"sS\", \"dD\", \"cC\", null, null],\n                    y: [\"tT\", \"6^\", \"7&\", \"uU\", \"hH\", \"gG\"],\n                    z: [null, \"aA\", \"sS\", \"xX\", null, null],\n                    \"{\": [\"pP\", \"-_\", \"=+\", \"]}\", \"'\\\"\", \";:\"],\n                    \"|\": [\"]}\", null, null, null, null, null],\n                    \"}\": [\"[{\", \"=+\", null, \"\\\\|\", null, \"'\\\"\"],\n                    \"~\": [null, null, null, \"1!\", null, null]\n                },\n                dvorak: {\n                    \"!\": [\"`~\", null, null, \"2@\", \"'\\\"\", null],\n                    '\"': [null, \"1!\", \"2@\", \",<\", \"aA\", null],\n                    \"#\": [\"2@\", null, null, \"4$\", \".>\", \",<\"],\n                    $: [\"3#\", null, null, \"5%\", \"pP\", \".>\"],\n                    \"%\": [\"4$\", null, null, \"6^\", \"yY\", \"pP\"],\n                    \"&\": [\"6^\", null, null, \"8*\", \"gG\", \"fF\"],\n                    \"'\": [null, \"1!\", \"2@\", \",<\", \"aA\", null],\n                    \"(\": [\"8*\", null, null, \"0)\", \"rR\", \"cC\"],\n                    \")\": [\"9(\", null, null, \"[{\", \"lL\", \"rR\"],\n                    \"*\": [\"7&\", null, null, \"9(\", \"cC\", \"gG\"],\n                    \"+\": [\"/?\", \"]}\", null, \"\\\\|\", null, \"-_\"],\n                    \",\": [\"'\\\"\", \"2@\", \"3#\", \".>\", \"oO\", \"aA\"],\n                    \"-\": [\"sS\", \"/?\", \"=+\", null, null, \"zZ\"],\n                    \".\": [\",<\", \"3#\", \"4$\", \"pP\", \"eE\", \"oO\"],\n                    \"/\": [\"lL\", \"[{\", \"]}\", \"=+\", \"-_\", \"sS\"],\n                    0: [\"9(\", null, null, \"[{\", \"lL\", \"rR\"],\n                    1: [\"`~\", null, null, \"2@\", \"'\\\"\", null],\n                    2: [\"1!\", null, null, \"3#\", \",<\", \"'\\\"\"],\n                    3: [\"2@\", null, null, \"4$\", \".>\", \",<\"],\n                    4: [\"3#\", null, null, \"5%\", \"pP\", \".>\"],\n                    5: [\"4$\", null, null, \"6^\", \"yY\", \"pP\"],\n                    6: [\"5%\", null, null, \"7&\", \"fF\", \"yY\"],\n                    7: [\"6^\", null, null, \"8*\", \"gG\", \"fF\"],\n                    8: [\"7&\", null, null, \"9(\", \"cC\", \"gG\"],\n                    9: [\"8*\", null, null, \"0)\", \"rR\", \"cC\"],\n                    \":\": [null, \"aA\", \"oO\", \"qQ\", null, null],\n                    \";\": [null, \"aA\", \"oO\", \"qQ\", null, null],\n                    \"<\": [\"'\\\"\", \"2@\", \"3#\", \".>\", \"oO\", \"aA\"],\n                    \"=\": [\"/?\", \"]}\", null, \"\\\\|\", null, \"-_\"],\n                    \">\": [\",<\", \"3#\", \"4$\", \"pP\", \"eE\", \"oO\"],\n                    \"?\": [\"lL\", \"[{\", \"]}\", \"=+\", \"-_\", \"sS\"],\n                    \"@\": [\"1!\", null, null, \"3#\", \",<\", \"'\\\"\"],\n                    A: [null, \"'\\\"\", \",<\", \"oO\", \";:\", null],\n                    B: [\"xX\", \"dD\", \"hH\", \"mM\", null, null],\n                    C: [\"gG\", \"8*\", \"9(\", \"rR\", \"tT\", \"hH\"],\n                    D: [\"iI\", \"fF\", \"gG\", \"hH\", \"bB\", \"xX\"],\n                    E: [\"oO\", \".>\", \"pP\", \"uU\", \"jJ\", \"qQ\"],\n                    F: [\"yY\", \"6^\", \"7&\", \"gG\", \"dD\", \"iI\"],\n                    G: [\"fF\", \"7&\", \"8*\", \"cC\", \"hH\", \"dD\"],\n                    H: [\"dD\", \"gG\", \"cC\", \"tT\", \"mM\", \"bB\"],\n                    I: [\"uU\", \"yY\", \"fF\", \"dD\", \"xX\", \"kK\"],\n                    J: [\"qQ\", \"eE\", \"uU\", \"kK\", null, null],\n                    K: [\"jJ\", \"uU\", \"iI\", \"xX\", null, null],\n                    L: [\"rR\", \"0)\", \"[{\", \"/?\", \"sS\", \"nN\"],\n                    M: [\"bB\", \"hH\", \"tT\", \"wW\", null, null],\n                    N: [\"tT\", \"rR\", \"lL\", \"sS\", \"vV\", \"wW\"],\n                    O: [\"aA\", \",<\", \".>\", \"eE\", \"qQ\", \";:\"],\n                    P: [\".>\", \"4$\", \"5%\", \"yY\", \"uU\", \"eE\"],\n                    Q: [\";:\", \"oO\", \"eE\", \"jJ\", null, null],\n                    R: [\"cC\", \"9(\", \"0)\", \"lL\", \"nN\", \"tT\"],\n                    S: [\"nN\", \"lL\", \"/?\", \"-_\", \"zZ\", \"vV\"],\n                    T: [\"hH\", \"cC\", \"rR\", \"nN\", \"wW\", \"mM\"],\n                    U: [\"eE\", \"pP\", \"yY\", \"iI\", \"kK\", \"jJ\"],\n                    V: [\"wW\", \"nN\", \"sS\", \"zZ\", null, null],\n                    W: [\"mM\", \"tT\", \"nN\", \"vV\", null, null],\n                    X: [\"kK\", \"iI\", \"dD\", \"bB\", null, null],\n                    Y: [\"pP\", \"5%\", \"6^\", \"fF\", \"iI\", \"uU\"],\n                    Z: [\"vV\", \"sS\", \"-_\", null, null, null],\n                    \"[\": [\"0)\", null, null, \"]}\", \"/?\", \"lL\"],\n                    \"\\\\\": [\"=+\", null, null, null, null, null],\n                    \"]\": [\"[{\", null, null, null, \"=+\", \"/?\"],\n                    \"^\": [\"5%\", null, null, \"7&\", \"fF\", \"yY\"],\n                    _: [\"sS\", \"/?\", \"=+\", null, null, \"zZ\"],\n                    \"`\": [null, null, null, \"1!\", null, null],\n                    a: [null, \"'\\\"\", \",<\", \"oO\", \";:\", null],\n                    b: [\"xX\", \"dD\", \"hH\", \"mM\", null, null],\n                    c: [\"gG\", \"8*\", \"9(\", \"rR\", \"tT\", \"hH\"],\n                    d: [\"iI\", \"fF\", \"gG\", \"hH\", \"bB\", \"xX\"],\n                    e: [\"oO\", \".>\", \"pP\", \"uU\", \"jJ\", \"qQ\"],\n                    f: [\"yY\", \"6^\", \"7&\", \"gG\", \"dD\", \"iI\"],\n                    g: [\"fF\", \"7&\", \"8*\", \"cC\", \"hH\", \"dD\"],\n                    h: [\"dD\", \"gG\", \"cC\", \"tT\", \"mM\", \"bB\"],\n                    i: [\"uU\", \"yY\", \"fF\", \"dD\", \"xX\", \"kK\"],\n                    j: [\"qQ\", \"eE\", \"uU\", \"kK\", null, null],\n                    k: [\"jJ\", \"uU\", \"iI\", \"xX\", null, null],\n                    l: [\"rR\", \"0)\", \"[{\", \"/?\", \"sS\", \"nN\"],\n                    m: [\"bB\", \"hH\", \"tT\", \"wW\", null, null],\n                    n: [\"tT\", \"rR\", \"lL\", \"sS\", \"vV\", \"wW\"],\n                    o: [\"aA\", \",<\", \".>\", \"eE\", \"qQ\", \";:\"],\n                    p: [\".>\", \"4$\", \"5%\", \"yY\", \"uU\", \"eE\"],\n                    q: [\";:\", \"oO\", \"eE\", \"jJ\", null, null],\n                    r: [\"cC\", \"9(\", \"0)\", \"lL\", \"nN\", \"tT\"],\n                    s: [\"nN\", \"lL\", \"/?\", \"-_\", \"zZ\", \"vV\"],\n                    t: [\"hH\", \"cC\", \"rR\", \"nN\", \"wW\", \"mM\"],\n                    u: [\"eE\", \"pP\", \"yY\", \"iI\", \"kK\", \"jJ\"],\n                    v: [\"wW\", \"nN\", \"sS\", \"zZ\", null, null],\n                    w: [\"mM\", \"tT\", \"nN\", \"vV\", null, null],\n                    x: [\"kK\", \"iI\", \"dD\", \"bB\", null, null],\n                    y: [\"pP\", \"5%\", \"6^\", \"fF\", \"iI\", \"uU\"],\n                    z: [\"vV\", \"sS\", \"-_\", null, null, null],\n                    \"{\": [\"0)\", null, null, \"]}\", \"/?\", \"lL\"],\n                    \"|\": [\"=+\", null, null, null, null, null],\n                    \"}\": [\"[{\", null, null, null, \"=+\", \"/?\"],\n                    \"~\": [null, null, null, \"1!\", null, null]\n                },\n                keypad: {\n                    \"*\": [\"/\", null, null, null, \"-\", \"+\", \"9\", \"8\"],\n                    \"+\": [\"9\", \"*\", \"-\", null, null, null, null, \"6\"],\n                    \"-\": [\"*\", null, null, null, null, null, \"+\", \"9\"],\n                    \".\": [\"0\", \"2\", \"3\", null, null, null, null, null],\n                    \"/\": [null, null, null, null, \"*\", \"9\", \"8\", \"7\"],\n                    0: [null, \"1\", \"2\", \"3\", \".\", null, null, null],\n                    1: [null, null, \"4\", \"5\", \"2\", \"0\", null, null],\n                    2: [\"1\", \"4\", \"5\", \"6\", \"3\", \".\", \"0\", null],\n                    3: [\"2\", \"5\", \"6\", null, null, null, \".\", \"0\"],\n                    4: [null, null, \"7\", \"8\", \"5\", \"2\", \"1\", null],\n                    5: [\"4\", \"7\", \"8\", \"9\", \"6\", \"3\", \"2\", \"1\"],\n                    6: [\"5\", \"8\", \"9\", \"+\", null, null, \"3\", \"2\"],\n                    7: [null, null, null, \"/\", \"8\", \"5\", \"4\", null],\n                    8: [\"7\", null, \"/\", \"*\", \"9\", \"6\", \"5\", \"4\"],\n                    9: [\"8\", \"/\", \"*\", \"-\", \"+\", null, \"6\", \"5\"]\n                },\n                mac_keypad: {\n                    \"*\": [\"/\", null, null, null, null, null, \"-\", \"9\"],\n                    \"+\": [\"6\", \"9\", \"-\", null, null, null, null, \"3\"],\n                    \"-\": [\"9\", \"/\", \"*\", null, null, null, \"+\", \"6\"],\n                    \".\": [\"0\", \"2\", \"3\", null, null, null, null, null],\n                    \"/\": [\"=\", null, null, null, \"*\", \"-\", \"9\", \"8\"],\n                    0: [null, \"1\", \"2\", \"3\", \".\", null, null, null],\n                    1: [null, null, \"4\", \"5\", \"2\", \"0\", null, null],\n                    2: [\"1\", \"4\", \"5\", \"6\", \"3\", \".\", \"0\", null],\n                    3: [\"2\", \"5\", \"6\", \"+\", null, null, \".\", \"0\"],\n                    4: [null, null, \"7\", \"8\", \"5\", \"2\", \"1\", null],\n                    5: [\"4\", \"7\", \"8\", \"9\", \"6\", \"3\", \"2\", \"1\"],\n                    6: [\"5\", \"8\", \"9\", \"-\", \"+\", null, \"3\", \"2\"],\n                    7: [null, null, null, \"=\", \"8\", \"5\", \"4\", null],\n                    8: [\"7\", null, \"=\", \"/\", \"9\", \"6\", \"5\", \"4\"],\n                    9: [\"8\", \"=\", \"/\", \"*\", \"-\", \"+\", \"6\", \"5\"],\n                    \"=\": [null, null, null, null, \"/\", \"9\", \"8\", \"7\"]\n                }\n            }, module.exports = adjacency_graphs;\n\n        }, {}],\n        2: [function (require, module, exports) {\n            var feedback, scoring;\n            scoring = require(\"./scoring\"), feedback = {\n                default_feedback: {\n                    warning: \"\",\n                    suggestions: [\"Use a few words, avoid common phrases\", \"No need for symbols, digits, or uppercase letters\"]\n                }, get_feedback: function (e, s) {\n                    var a, t, r, n, o, i;\n                    if (0 === s.length)return this.default_feedback;\n                    if (e > 2)return {warning: \"\", suggestions: []};\n                    for (n = s[0], i = s.slice(1), t = 0, r = i.length; r > t; t++)o = i[t], o.token.length > n.token.length && (n = o);\n                    return feedback = this.get_match_feedback(n, 1 === s.length), a = \"Add another word or two. Uncommon words are better.\", null != feedback ? (feedback.suggestions.unshift(a), null == feedback.warning && (feedback.warning = \"\")) : feedback = {\n                        warning: \"\",\n                        suggestions: [a]\n                    }, feedback\n                }, get_match_feedback: function (e, s) {\n                    var a, t;\n                    switch (e.pattern) {\n                        case\"dictionary\":\n                            return this.get_dictionary_match_feedback(e, s);\n                        case\"spatial\":\n                            return a = e.graph.toUpperCase(), t = 1 === e.turns ? \"Straight rows of keys are easy to guess\" : \"Short keyboard patterns are easy to guess\", {\n                                warning: t,\n                                suggestions: [\"Use a longer keyboard pattern with more turns\"]\n                            };\n                        case\"repeat\":\n                            return t = 1 === e.base_token.length ? 'Repeats like \"aaa\" are easy to guess' : 'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"', {\n                                warning: t,\n                                suggestions: [\"Avoid repeated words and characters\"]\n                            };\n                        case\"sequence\":\n                            return {\n                                warning: \"Sequences like abc or 6543 are easy to guess\",\n                                suggestions: [\"Avoid sequences\"]\n                            };\n                        case\"regex\":\n                            if (\"recent_year\" === e.regex_name)return {\n                                warning: \"Recent years are easy to guess\",\n                                suggestions: [\"Avoid recent years\", \"Avoid years that are associated with you\"]\n                            };\n                            break;\n                        case\"date\":\n                            return {\n                                warning: \"Dates are often easy to guess\",\n                                suggestions: [\"Avoid dates and years that are associated with you\"]\n                            }\n                    }\n                }, get_dictionary_match_feedback: function (e, s) {\n                    var a, t, r, n, o;\n                    return n = \"passwords\" === e.dictionary_name ? !s || e.l33t || e.reversed ? e.guesses_log10 <= 4 ? \"This is similar to a commonly used password\" : void 0 : e.rank <= 10 ? \"This is a top-10 common password\" : e.rank <= 100 ? \"This is a top-100 common password\" : \"This is a very common password\" : \"english\" === e.dictionary_name ? s ? \"A word by itself is easy to guess\" : void 0 : \"surnames\" === (a = e.dictionary_name) || \"male_names\" === a || \"female_names\" === a ? s ? \"Names and surnames by themselves are easy to guess\" : \"Common names and surnames are easy to guess\" : \"\", r = [], o = e.token, o.match(scoring.START_UPPER) ? r.push(\"Capitalization doesn't help very much\") : o.match(scoring.ALL_UPPER) && r.push(\"All-uppercase is almost as easy to guess as all-lowercase\"), e.reversed && e.token.length >= 4 && r.push(\"Reversed words aren't much harder to guess\"), e.l33t && r.push(\"Predictable substitutions like '@' instead of 'a' don't help very much\"), t = {\n                        warning: n,\n                        suggestions: r\n                    }\n                }\n            }, module.exports = feedback;\n\n        }, {\"./scoring\": 6}],\n        3: [function (require, module, exports) {\n            var frequency_lists;\n            frequency_lists = {\n            }, module.exports = frequency_lists;\n\n        }, {}],\n        4: [function (require, module, exports) {\n            var feedback, matching, scoring, time, time_estimates, zxcvbn;\n            matching = require(\"./matching\"), scoring = require(\"./scoring\"), time_estimates = require(\"./time_estimates\"), feedback = require(\"./feedback\"), time = function () {\n                return (new Date).getTime()\n            }, zxcvbn = function (e, t) {\n                var i, n, c, s, a, r, m, o, u, g, _;\n                for (null == t && (t = []), g = time(), u = [], c = 0, s = t.length; s > c; c++)i = t[c], (\"string\" == (m = typeof i) || \"number\" === m || \"boolean\" === m) && u.push(i.toString().toLowerCase());\n                matching.set_user_input_dictionary(u), a = matching.omnimatch(e), o = scoring.most_guessable_match_sequence(e, a), o.calc_time = time() - g, n = time_estimates.estimate_attack_times(o.guesses);\n                for (r in n)_ = n[r], o[r] = _;\n                return o.feedback = feedback.get_feedback(o.score, o.sequence), o\n            }, module.exports = zxcvbn;\n\n        }, {\"./feedback\": 2, \"./matching\": 5, \"./scoring\": 6, \"./time_estimates\": 7}],\n        5: [function (require, module, exports) {\n            var DATE_MAX_YEAR, DATE_MIN_YEAR, DATE_SPLITS, GRAPHS, L33T_TABLE, RANKED_DICTIONARIES, REGEXEN, SEQUENCES, adjacency_graphs, build_ranked_dict, frequency_lists, lst, matching, name, scoring, indexOf = [].indexOf || function (e) {\n                    for (var t = 0, n = this.length; n > t; t++)if (t in this && this[t] === e)return t;\n                    return -1\n                };\n            frequency_lists = require(\"./frequency_lists\"), adjacency_graphs = require(\"./adjacency_graphs\"), scoring = require(\"./scoring\"), build_ranked_dict = function (e) {\n                var t, n, r, i, a;\n                for (i = {}, t = 1, r = 0, n = e.length; n > r; r++)a = e[r], i[a] = t, t += 1;\n                return i\n            }, RANKED_DICTIONARIES = {};\n            for (name in frequency_lists)lst = frequency_lists[name], RANKED_DICTIONARIES[name] = build_ranked_dict(lst);\n            GRAPHS = {\n                qwerty: adjacency_graphs.qwerty,\n                dvorak: adjacency_graphs.dvorak,\n                keypad: adjacency_graphs.keypad,\n                mac_keypad: adjacency_graphs.mac_keypad\n            }, SEQUENCES = {\n                lower: \"abcdefghijklmnopqrstuvwxyz\",\n                upper: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n                digits: \"0123456789\"\n            }, L33T_TABLE = {\n                a: [\"4\", \"@\"],\n                b: [\"8\"],\n                c: [\"(\", \"{\", \"[\", \"<\"],\n                e: [\"3\"],\n                g: [\"6\", \"9\"],\n                i: [\"1\", \"!\", \"|\"],\n                l: [\"1\", \"|\", \"7\"],\n                o: [\"0\"],\n                s: [\"$\", \"5\"],\n                t: [\"+\", \"7\"],\n                x: [\"%\"],\n                z: [\"2\"]\n            }, REGEXEN = {recent_year: /19\\d\\d|200\\d|201\\d/g}, DATE_MAX_YEAR = 2050, DATE_MIN_YEAR = 1e3, DATE_SPLITS = {\n                4: [[1, 2], [2, 3]],\n                5: [[1, 3], [2, 3]],\n                6: [[1, 2], [2, 4], [4, 5]],\n                7: [[1, 3], [2, 3], [4, 5], [4, 6]],\n                8: [[2, 4], [4, 6]]\n            }, matching = {\n                empty: function (e) {\n                    var t;\n                    return 0 === function () {\n                            var n;\n                            n = [];\n                            for (t in e)n.push(t);\n                            return n\n                        }().length\n                },\n                extend: function (e, t) {\n                    return e.push.apply(e, t)\n                },\n                translate: function (e, t) {\n                    var n;\n                    return function () {\n                        var r, i, a, s;\n                        for (a = e.split(\"\"), s = [], i = 0, r = a.length; r > i; i++)n = a[i], s.push(t[n] || n);\n                        return s\n                    }().join(\"\")\n                },\n                mod: function (e, t) {\n                    return (e % t + t) % t\n                },\n                sorted: function (e) {\n                    return e.sort(function (e, t) {\n                        return e.i - t.i || e.j - t.j\n                    })\n                },\n                omnimatch: function (e) {\n                    var t, n, r, i, a;\n                    for (i = [], r = [this.dictionary_match, this.reverse_dictionary_match, this.l33t_match, this.spatial_match, this.repeat_match, this.sequence_match, this.regex_match, this.date_match], a = 0, t = r.length; t > a; a++)n = r[a], this.extend(i, n.call(this, e));\n                    return this.sorted(i)\n                },\n                dictionary_match: function (e, t) {\n                    var n, r, i, a, s, o, h, c, u, l, _, f, d, g;\n                    null == t && (t = RANKED_DICTIONARIES), s = [], a = e.length, c = e.toLowerCase();\n                    for (n in t)for (l = t[n], r = o = 0, _ = a; _ >= 0 ? _ > o : o > _; r = _ >= 0 ? ++o : --o)for (i = h = f = r, d = a; d >= f ? d > h : h > d; i = d >= f ? ++h : --h)c.slice(r, +i + 1 || 9e9)in l && (g = c.slice(r, +i + 1 || 9e9), u = l[g], s.push({\n                        pattern: \"dictionary\",\n                        i: r,\n                        j: i,\n                        token: e.slice(r, +i + 1 || 9e9),\n                        matched_word: g,\n                        rank: u,\n                        dictionary_name: n,\n                        reversed: !1,\n                        l33t: !1\n                    }));\n                    return this.sorted(s)\n                },\n                reverse_dictionary_match: function (e, t) {\n                    var n, r, i, a, s, o;\n                    for (null == t && (t = RANKED_DICTIONARIES), o = e.split(\"\").reverse().join(\"\"), i = this.dictionary_match(o, t), a = 0, n = i.length; n > a; a++)r = i[a], r.token = r.token.split(\"\").reverse().join(\"\"), r.reversed = !0, s = [e.length - 1 - r.j, e.length - 1 - r.i], r.i = s[0], r.j = s[1];\n                    return this.sorted(i)\n                },\n                set_user_input_dictionary: function (e) {\n                    return RANKED_DICTIONARIES.user_inputs = build_ranked_dict(e.slice())\n                },\n                relevant_l33t_subtable: function (e, t) {\n                    var n, r, i, a, s, o, h, c, u, l;\n                    for (s = {}, o = e.split(\"\"), a = 0, r = o.length; r > a; a++)n = o[a], s[n] = !0;\n                    l = {};\n                    for (i in t)u = t[i], h = function () {\n                        var e, t, n;\n                        for (n = [], t = 0, e = u.length; e > t; t++)c = u[t], c in s && n.push(c);\n                        return n\n                    }(), h.length > 0 && (l[i] = h);\n                    return l\n                },\n                enumerate_l33t_subs: function (e) {\n                    var t, n, r, i, a, s, o, h, c, u, l, _, f, d, g;\n                    a = function () {\n                        var t;\n                        t = [];\n                        for (i in e)t.push(i);\n                        return t\n                    }(), g = [[]], n = function (e) {\n                        var t, n, r, a, s, o, h, c;\n                        for (n = [], s = {}, o = 0, a = e.length; a > o; o++)h = e[o], t = function () {\n                            var e, t, n;\n                            for (n = [], c = t = 0, e = h.length; e > t; c = ++t)i = h[c], n.push([i, c]);\n                            return n\n                        }(), t.sort(), r = function () {\n                            var e, n, r;\n                            for (r = [], c = n = 0, e = t.length; e > n; c = ++n)i = t[c], r.push(i + \",\" + c);\n                            return r\n                        }().join(\"-\"), r in s || (s[r] = !0, n.push(h));\n                        return n\n                    }, r = function (t) {\n                        var i, a, s, o, h, c, u, l, _, f, d, p, E, m, y, A;\n                        if (t.length) {\n                            for (a = t[0], E = t.slice(1), u = [], d = e[a], l = 0, h = d.length; h > l; l++)for (o = d[l], _ = 0, c = g.length; c > _; _++) {\n                                for (m = g[_], i = -1, s = f = 0, p = m.length; p >= 0 ? p > f : f > p; s = p >= 0 ? ++f : --f)if (m[s][0] === o) {\n                                    i = s;\n                                    break\n                                }\n                                -1 === i ? (A = m.concat([[o, a]]), u.push(A)) : (y = m.slice(0), y.splice(i, 1), y.push([o, a]), u.push(m), u.push(y))\n                            }\n                            return g = n(u), r(E)\n                        }\n                    }, r(a), d = [];\n                    for (c = 0, o = g.length; o > c; c++) {\n                        for (_ = g[c], f = {}, u = 0, h = _.length; h > u; u++)l = _[u], s = l[0], t = l[1], f[s] = t;\n                        d.push(f)\n                    }\n                    return d\n                },\n                l33t_match: function (e, t, n) {\n                    var r, i, a, s, o, h, c, u, l, _, f, d, g, p, E, m;\n                    for (null == t && (t = RANKED_DICTIONARIES), null == n && (n = L33T_TABLE), c = [], _ = this.enumerate_l33t_subs(this.relevant_l33t_subtable(e, n)), u = 0, a = _.length; a > u && (d = _[u], !this.empty(d)); u++)for (p = this.translate(e, d), f = this.dictionary_match(p, t), l = 0, s = f.length; s > l; l++)if (o = f[l], E = e.slice(o.i, +o.j + 1 || 9e9), E.toLowerCase() !== o.matched_word) {\n                        h = {};\n                        for (g in d)r = d[g], -1 !== E.indexOf(g) && (h[g] = r);\n                        o.l33t = !0, o.token = E, o.sub = h, o.sub_display = function () {\n                            var e;\n                            e = [];\n                            for (i in h)m = h[i], e.push(i + \" -> \" + m);\n                            return e\n                        }().join(\", \"), c.push(o)\n                    }\n                    return this.sorted(c.filter(function (e) {\n                        return e.token.length > 1\n                    }))\n                },\n                spatial_match: function (e, t) {\n                    var n, r, i;\n                    null == t && (t = GRAPHS), i = [];\n                    for (r in t)n = t[r], this.extend(i, this.spatial_match_helper(e, n, r));\n                    return this.sorted(i)\n                },\n                SHIFTED_RX: /[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?]/,\n                spatial_match_helper: function (e, t, n) {\n                    var r, i, a, s, o, h, c, u, l, _, f, d, g, p, E;\n                    for (f = [], c = 0; c < e.length - 1;)for (u = c + 1, l = null, E = 0, p = \"qwerty\" !== n && \"dvorak\" !== n || !this.SHIFTED_RX.exec(e.charAt(c)) ? 0 : 1; ;) {\n                        if (g = e.charAt(u - 1), o = !1, h = -1, s = -1, i = t[g] || [], u < e.length)for (a = e.charAt(u), d = 0, _ = i.length; _ > d; d++)if (r = i[d], s += 1, r && -1 !== r.indexOf(a)) {\n                            o = !0, h = s, 1 === r.indexOf(a) && (p += 1), l !== h && (E += 1, l = h);\n                            break\n                        }\n                        if (!o) {\n                            u - c > 2 && f.push({\n                                pattern: \"spatial\",\n                                i: c,\n                                j: u - 1,\n                                token: e.slice(c, u),\n                                graph: n,\n                                turns: E,\n                                shifted_count: p\n                            }), c = u;\n                            break\n                        }\n                        u += 1\n                    }\n                    return f\n                },\n                repeat_match: function (e) {\n                    var t, n, r, i, a, s, o, h, c, u, l, _, f, d, g;\n                    for (d = [], a = /(.+)\\1+/g, u = /(.+?)\\1+/g, l = /^(.+?)\\1+$/, c = 0; c < e.length && (a.lastIndex = u.lastIndex = c, s = a.exec(e), _ = u.exec(e), null != s);)s[0].length > _[0].length ? (f = s, i = l.exec(f[0])[1]) : (f = _, i = f[1]), g = [f.index, f.index + f[0].length - 1], o = g[0], h = g[1], t = scoring.most_guessable_match_sequence(i, this.omnimatch(i)), r = t.match_sequence, n = t.guesses, d.push({\n                        pattern: \"repeat\",\n                        i: o,\n                        j: h,\n                        token: f[0],\n                        base_token: i,\n                        base_guesses: n,\n                        base_matches: r,\n                        repeat_count: f[0].length / i.length\n                    }), c = h + 1;\n                    return d\n                },\n                sequence_match: function (e) {\n                    var t, n, r, i, a, s, o, h, c, u, l, _;\n                    a = [];\n                    for (l in SEQUENCES)for (u = SEQUENCES[l], h = [1, -1], o = 0, i = h.length; i > o; o++)for (t = h[o], n = 0; n < e.length;)if (c = e.charAt(n), indexOf.call(u, c) < 0)n += 1; else {\n                        for (r = n + 1, _ = u.indexOf(e.charAt(n)); r < e.length && (s = this.mod(_ + t, u.length), u.indexOf(e.charAt(r)) === s);)r += 1, _ = s;\n                        r -= 1, r - n + 1 > 1 && a.push({\n                            pattern: \"sequence\",\n                            i: n,\n                            j: r,\n                            token: e.slice(n, +r + 1 || 9e9),\n                            sequence_name: l,\n                            sequence_space: u.length,\n                            ascending: 1 === t\n                        }), n = r + 1\n                    }\n                    return this.sorted(a)\n                },\n                regex_match: function (e, t) {\n                    var n, r, i, a;\n                    null == t && (t = REGEXEN), n = [];\n                    for (name in t)for (r = t[name], r.lastIndex = 0; i = r.exec(e);)a = i[0], n.push({\n                        pattern: \"regex\",\n                        token: a,\n                        i: i.index,\n                        j: i.index + i[0].length - 1,\n                        regex_name: name,\n                        regex_match: i\n                    });\n                    return this.sorted(n)\n                },\n                date_match: function (e) {\n                    var t, n, r, i, a, s, o, h, c, u, l, _, f, d, g, p, E, m, y, A, v, I, R, x, T, N, k, D, S, j, b, q, C, O;\n                    for (_ = [], f = /^\\d{4,8}$/, d = /^(\\d{1,4})([\\s\\/\\\\_.-])(\\d{1,2})\\2(\\d{1,4})$/, s = E = 0, v = e.length - 4; v >= 0 ? v >= E : E >= v; s = v >= 0 ? ++E : --E)for (o = m = I = s + 3, R = s + 7; (R >= I ? R >= m : m >= R) && !(o >= e.length); o = R >= I ? ++m : --m)if (O = e.slice(s, +o + 1 || 9e9), f.exec(O)) {\n                        for (r = [], x = DATE_SPLITS[O.length], y = 0, u = x.length; u > y; y++)T = x[y], h = T[0], c = T[1], a = this.map_ints_to_dmy([parseInt(O.slice(0, h)), parseInt(O.slice(h, c)), parseInt(O.slice(c))]), null != a && r.push(a);\n                        if (r.length > 0) {\n                            for (t = r[0], g = function (e) {\n                                return Math.abs(e.year - scoring.REFERENCE_YEAR)\n                            }, p = g(r[0]), N = r.slice(1), A = 0, l = N.length; l > A; A++)n = N[A], i = g(n), p > i && (k = [n, i], t = k[0], p = k[1]);\n                            _.push({\n                                pattern: \"date\",\n                                token: O,\n                                i: s,\n                                j: o,\n                                separator: \"\",\n                                year: t.year,\n                                month: t.month,\n                                day: t.day\n                            })\n                        }\n                    }\n                    for (s = q = 0, D = e.length - 6; D >= 0 ? D >= q : q >= D; s = D >= 0 ? ++q : --q)for (o = C = S = s + 5, j = s + 9; (j >= S ? j >= C : C >= j) && !(o >= e.length); o = j >= S ? ++C : --C)O = e.slice(s, +o + 1 || 9e9), b = d.exec(O), null != b && (a = this.map_ints_to_dmy([parseInt(b[1]), parseInt(b[3]), parseInt(b[4])]), null != a && _.push({\n                        pattern: \"date\",\n                        token: O,\n                        i: s,\n                        j: o,\n                        separator: b[2],\n                        year: a.year,\n                        month: a.month,\n                        day: a.day\n                    }));\n                    return this.sorted(_.filter(function (e) {\n                        var t, n, r, i;\n                        for (t = !1, i = 0, n = _.length; n > i; i++)if (r = _[i], e !== r && r.i <= e.i && r.j >= e.j) {\n                            t = !0;\n                            break\n                        }\n                        return !t\n                    }))\n                },\n                map_ints_to_dmy: function (e) {\n                    var t, n, r, i, a, s, o, h, c, u, l, _, f, d, g, p;\n                    if (!(e[1] > 31 || e[1] <= 0)) {\n                        for (o = 0, h = 0, g = 0, s = 0, r = e.length; r > s; s++) {\n                            if (n = e[s], n > 99 && DATE_MIN_YEAR > n || n > DATE_MAX_YEAR)return;\n                            n > 31 && (h += 1), n > 12 && (o += 1), 0 >= n && (g += 1)\n                        }\n                        if (!(h >= 2 || 3 === o || g >= 2)) {\n                            for (u = [[e[2], e.slice(0, 2)], [e[0], e.slice(1, 3)]], c = 0, i = u.length; i > c; c++)if (_ = u[c], p = _[0], d = _[1], p >= DATE_MIN_YEAR && DATE_MAX_YEAR >= p)return t = this.map_ints_to_dm(d), null != t ? {\n                                year: p,\n                                month: t.month,\n                                day: t.day\n                            } : void 0;\n                            for (l = 0, a = u.length; a > l; l++)if (f = u[l], p = f[0], d = f[1], t = this.map_ints_to_dm(d), null != t)return p = this.two_to_four_digit_year(p), {\n                                year: p,\n                                month: t.month,\n                                day: t.day\n                            }\n                        }\n                    }\n                },\n                map_ints_to_dm: function (e) {\n                    var t, n, r, i, a, s;\n                    for (a = [e, e.slice().reverse()], i = 0, n = a.length; n > i; i++)if (s = a[i], t = s[0], r = s[1], t >= 1 && 31 >= t && r >= 1 && 12 >= r)return {\n                        day: t,\n                        month: r\n                    }\n                },\n                two_to_four_digit_year: function (e) {\n                    return e > 99 ? e : e > 50 ? e + scoring.REFERENCE_YEAR - 100 : e + scoring.REFERENCE_YEAR\n                }\n            }, module.exports = matching;\n\n        }, {\"./adjacency_graphs\": 1, \"./frequency_lists\": 3, \"./scoring\": 6}],\n        6: [function (require, module, exports) {\n            var BRUTEFORCE_CARDINALITY, MIN_GUESSES_BEFORE_GROWING_SEQUENCE, MIN_SUBMATCH_GUESSES_MULTI_CHAR, MIN_SUBMATCH_GUESSES_SINGLE_CHAR, adjacency_graphs, calc_average_degree, k, scoring, v;\n            adjacency_graphs = require(\"./adjacency_graphs\"), calc_average_degree = function (e) {\n                var t, n, r, s, a, _;\n                t = 0;\n                for (r in e)a = e[r], t += function () {\n                    var e, t, n;\n                    for (n = [], t = 0, e = a.length; e > t; t++)s = a[t], s && n.push(s);\n                    return n\n                }().length;\n                return t /= function () {\n                    var t;\n                    t = [];\n                    for (n in e)_ = e[n], t.push(n);\n                    return t\n                }().length\n            }, BRUTEFORCE_CARDINALITY = 10, MIN_GUESSES_BEFORE_GROWING_SEQUENCE = 1e4, MIN_SUBMATCH_GUESSES_SINGLE_CHAR = 10, MIN_SUBMATCH_GUESSES_MULTI_CHAR = 50, scoring = {\n                nCk: function (e, t) {\n                    var n, r, s, a;\n                    if (t > e)return 0;\n                    if (0 === t)return 1;\n                    for (s = 1, n = r = 1, a = t; a >= 1 ? a >= r : r >= a; n = a >= 1 ? ++r : --r)s *= e, s /= n, e -= 1;\n                    return s\n                },\n                log10: function (e) {\n                    return Math.log(e) / Math.log(10)\n                },\n                log2: function (e) {\n                    return Math.log(e) / Math.log(2)\n                },\n                factorial: function (e) {\n                    var t, n, r, s;\n                    if (2 > e)return 1;\n                    for (t = 1, n = r = 2, s = e; s >= 2 ? s >= r : r >= s; n = s >= 2 ? ++r : --r)t *= n;\n                    return t\n                },\n                most_guessable_match_sequence: function (e, t, n) {\n                    var r, s, a, _, i, u, o, h, E, g, c, l, f, A, S, R, p, M, v, I, N, C, U, T, G, d, k, m, O, P, L, y, B, D;\n                    for (null == n && (n = !1), C = [], r = [], M = 0, N = null, S = function (t) {\n                        return function (t, n) {\n                            var r;\n                            return r = {pattern: \"bruteforce\", token: e.slice(t, +n + 1 || 9e9), i: t, j: n}\n                        }\n                    }(this), D = function (e) {\n                        return function (t, r) {\n                            var s;\n                            return s = e.factorial(r) * t, n || (s += Math.pow(MIN_GUESSES_BEFORE_GROWING_SEQUENCE, r - 1)), s\n                        }\n                    }(this), c = A = 0, k = e.length; k >= 0 ? k > A : A > k; c = k >= 0 ? ++A : --A)for (r[c] = [], C[c] = [], U = 1 / 0, G = I = 0, m = M; m >= 0 ? m >= I : I >= m; G = m >= 0 ? ++I : --I)for (o = !0, a = c, 0 === G ? (s = 0, v = 1) : \"bruteforce\" === (null != (O = r[c - 1]) && null != (P = O[G]) ? P.pattern : void 0) ? (s = r[c - 1][G].i, v = G) : null != (null != (L = r[c - 1]) ? L[G] : void 0) ? (s = c, v = G + 1) : o = !1, o && (_ = S(s, a), T = c - _.token.length, i = this.estimate_guesses(_, e), v > 1 && (i *= C[T][v - 1]), u = D(i, v), U > u && (U = u, C[c][v] = i, N = v, M = Math.max(M, v), r[c][v] = _)), d = 0, f = t.length; f > d; d++)if (R = t[d], R.j === c) {\n                        if (y = [R.i, R.j], E = y[0], g = y[1], 0 === G) {\n                            if (0 !== E)continue\n                        } else if (null == (null != (B = C[E - 1]) ? B[G] : void 0))continue;\n                        i = this.estimate_guesses(R, e), G > 0 && (i *= C[E - 1][G]), u = D(i, G + 1), U > u && (U = u, C[c][G + 1] = i, N = G + 1, M = Math.max(M, G + 1), r[c][G + 1] = R)\n                    }\n                    for (p = [], l = N, c = e.length - 1; c >= 0;)R = r[c][l], p.push(R), c = R.i - 1, l -= 1;\n                    return p.reverse(), h = 0 === e.length ? 1 : U, {\n                        password: e,\n                        guesses: h,\n                        guesses_log10: this.log10(h),\n                        sequence: p\n                    }\n                },\n                estimate_guesses: function (e, t) {\n                    var n, r, s;\n                    return null != e.guesses ? e.guesses : (s = 1, e.token.length < t.length && (s = 1 === e.token.length ? MIN_SUBMATCH_GUESSES_SINGLE_CHAR : MIN_SUBMATCH_GUESSES_MULTI_CHAR), n = {\n                        bruteforce: this.bruteforce_guesses,\n                        dictionary: this.dictionary_guesses,\n                        spatial: this.spatial_guesses,\n                        repeat: this.repeat_guesses,\n                        sequence: this.sequence_guesses,\n                        regex: this.regex_guesses,\n                        date: this.date_guesses\n                    }, r = n[e.pattern].call(this, e), e.guesses = Math.max(r, s), e.guesses_log10 = this.log10(e.guesses), e.guesses)\n                },\n                bruteforce_guesses: function (e) {\n                    var t, n;\n                    return t = Math.pow(BRUTEFORCE_CARDINALITY, e.token.length), n = 1 === e.token.length ? MIN_SUBMATCH_GUESSES_SINGLE_CHAR + 1 : MIN_SUBMATCH_GUESSES_MULTI_CHAR + 1, Math.max(t, n)\n                },\n                repeat_guesses: function (e) {\n                    return e.base_guesses * e.repeat_count\n                },\n                sequence_guesses: function (e) {\n                    var t, n;\n                    return n = e.token.charAt(0), t = \"a\" === n || \"A\" === n || \"z\" === n || \"Z\" === n || \"0\" === n || \"1\" === n || \"9\" === n ? 4 : n.match(/\\d/) ? 10 : 26, e.ascending || (t *= 2), t * e.token.length\n                },\n                MIN_YEAR_SPACE: 20,\n                REFERENCE_YEAR: 2e3,\n                regex_guesses: function (e) {\n                    var t, n;\n                    if (t = {\n                            alpha_lower: 26,\n                            alpha_upper: 26,\n                            alpha: 52,\n                            alphanumeric: 62,\n                            digits: 10,\n                            symbols: 33\n                        }, e.regex_name in t)return Math.pow(t[e.regex_name], e.token.length);\n                    switch (e.regex_name) {\n                        case\"recent_year\":\n                            return n = Math.abs(parseInt(e.regex_match[0]) - this.REFERENCE_YEAR), n = Math.max(n, this.MIN_YEAR_SPACE)\n                    }\n                },\n                date_guesses: function (e) {\n                    var t, n;\n                    return n = Math.max(Math.abs(e.year - this.REFERENCE_YEAR), this.MIN_YEAR_SPACE), t = 31 * n * 12, e.has_full_year && (t *= 2), e.separator && (t *= 4), t\n                },\n                KEYBOARD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.qwerty),\n                KEYPAD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.keypad),\n                KEYBOARD_STARTING_POSITIONS: function () {\n                    var e, t;\n                    e = adjacency_graphs.qwerty, t = [];\n                    for (k in e)v = e[k], t.push(k);\n                    return t\n                }().length,\n                KEYPAD_STARTING_POSITIONS: function () {\n                    var e, t;\n                    e = adjacency_graphs.keypad, t = [];\n                    for (k in e)v = e[k], t.push(k);\n                    return t\n                }().length,\n                spatial_guesses: function (e) {\n                    var t, n, r, s, a, _, i, u, o, h, E, g, c, l, f, A, S, R;\n                    for (\"qwerty\" === (g = e.graph) || \"dvorak\" === g ? (A = this.KEYBOARD_STARTING_POSITIONS, s = this.KEYBOARD_AVERAGE_DEGREE) : (A = this.KEYPAD_STARTING_POSITIONS, s = this.KEYPAD_AVERAGE_DEGREE), a = 0, t = e.token.length, R = e.turns, _ = u = 2, c = t; c >= 2 ? c >= u : u >= c; _ = c >= 2 ? ++u : --u)for (h = Math.min(R, _ - 1), i = o = 1, l = h; l >= 1 ? l >= o : o >= l; i = l >= 1 ? ++o : --o)a += this.nCk(_ - 1, i - 1) * A * Math.pow(s, i);\n                    if (e.shifted_count)if (n = e.shifted_count, r = e.token.length - e.shifted_count, 0 === n || 0 === r)a *= 2; else {\n                        for (S = 0, _ = E = 1, f = Math.min(n, r); f >= 1 ? f >= E : E >= f; _ = f >= 1 ? ++E : --E)S += this.nCk(n + r, _);\n                        a *= S\n                    }\n                    return a\n                },\n                dictionary_guesses: function (e) {\n                    var t;\n                    return e.base_guesses = e.rank, e.uppercase_variations = this.uppercase_variations(e), e.l33t_variations = this.l33t_variations(e), t = e.reversed && 2 || 1, e.base_guesses * e.uppercase_variations * e.l33t_variations * t\n                },\n                START_UPPER: /^[A-Z][^A-Z]+$/,\n                END_UPPER: /^[^A-Z]+[A-Z]$/,\n                ALL_UPPER: /^[^a-z]+$/,\n                ALL_LOWER: /^[^A-Z]+$/,\n                uppercase_variations: function (e) {\n                    var t, n, r, s, a, _, i, u, o, h, E, g;\n                    if (g = e.token, g.match(this.ALL_LOWER))return 1;\n                    for (u = [this.START_UPPER, this.END_UPPER, this.ALL_UPPER], _ = 0, a = u.length; a > _; _++)if (h = u[_], g.match(h))return 2;\n                    for (n = function () {\n                        var e, t, n, s;\n                        for (n = g.split(\"\"), s = [], t = 0, e = n.length; e > t; t++)r = n[t], r.match(/[A-Z]/) && s.push(r);\n                        return s\n                    }().length, t = function () {\n                        var e, t, n, s;\n                        for (n = g.split(\"\"), s = [], t = 0, e = n.length; e > t; t++)r = n[t], r.match(/[a-z]/) && s.push(r);\n                        return s\n                    }().length, E = 0, s = i = 1, o = Math.min(n, t); o >= 1 ? o >= i : i >= o; s = o >= 1 ? ++i : --i)E += this.nCk(n + t, s);\n                    return E\n                },\n                l33t_variations: function (e) {\n                    var t, n, r, s, a, _, i, u, o, h, E, g, c;\n                    if (!e.l33t)return 1;\n                    c = 1, o = e.sub;\n                    for (E in o)if (g = o[E], s = e.token.toLowerCase().split(\"\"), t = function () {\n                            var e, t, n;\n                            for (n = [], t = 0, e = s.length; e > t; t++)r = s[t], r === E && n.push(r);\n                            return n\n                        }().length, n = function () {\n                            var e, t, n;\n                            for (n = [], t = 0, e = s.length; e > t; t++)r = s[t], r === g && n.push(r);\n                            return n\n                        }().length, 0 === t || 0 === n)c *= 2; else {\n                        for (i = Math.min(n, t), u = 0, a = _ = 1, h = i; h >= 1 ? h >= _ : _ >= h; a = h >= 1 ? ++_ : --_)u += this.nCk(n + t, a);\n                        c *= u\n                    }\n                    return c\n                }\n            }, module.exports = scoring;\n\n        }, {\"./adjacency_graphs\": 1}],\n        7: [function (require, module, exports) {\n            var time_estimates;\n            time_estimates = {\n                estimate_attack_times: function (e) {\n                    var t, n, s, o;\n                    n = {\n                        online_throttling_100_per_hour: e / (100 / 3600),\n                        online_no_throttling_10_per_second: e / 100,\n                        offline_slow_hashing_1e4_per_second: e / 1e4,\n                        offline_fast_hashing_1e10_per_second: e / 1e10\n                    }, t = {};\n                    for (s in n)o = n[s], t[s] = this.display_time(o);\n                    return {crack_times_seconds: n, crack_times_display: t, score: this.guesses_to_score(e)}\n                }, guesses_to_score: function (e) {\n                    var t;\n                    return t = 5, 1e3 + t > e ? 0 : 1e6 + t > e ? 1 : 1e8 + t > e ? 2 : 1e10 + t > e ? 3 : 4\n                }, display_time: function (e) {\n                    var t, n, s, o, _, r, i, a, u, c;\n                    return i = 60, r = 60 * i, s = 24 * r, a = 31 * s, c = 12 * a, n = 100 * c, u = 1 > e ? [null, \"less than a second\"] : i > e ? (t = Math.round(e), [t, t + \" second\"]) : r > e ? (t = Math.round(e / i), [t, t + \" minute\"]) : s > e ? (t = Math.round(e / r), [t, t + \" hour\"]) : a > e ? (t = Math.round(e / s), [t, t + \" day\"]) : c > e ? (t = Math.round(e / a), [t, t + \" month\"]) : n > e ? (t = Math.round(e / c), [t, t + \" year\"]) : [null, \"centuries\"], o = u[0], _ = u[1], null != o && 1 !== o && (_ += \"s\"), _\n                }\n            }, module.exports = time_estimates;\n\n        }, {}]\n    }, {}, [4])(4)\n});\n//# sourceMappingURL=zxcvbn.js.map\n"}
}});
